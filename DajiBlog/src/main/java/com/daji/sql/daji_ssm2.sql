/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 5.5.40 : Database - daji_ssm
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`daji_ssm` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `daji_ssm`;

/*Table structure for table `blog_type` */

DROP TABLE IF EXISTS `blog_type`;

CREATE TABLE `blog_type` (
  `bid` int(11) NOT NULL DEFAULT '0',
  `tid` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`bid`,`tid`),
  KEY `tid` (`tid`),
  CONSTRAINT `blog_type_ibfk_1` FOREIGN KEY (`bid`) REFERENCES `t_blog` (`id`),
  CONSTRAINT `blog_type_ibfk_2` FOREIGN KEY (`tid`) REFERENCES `t_type` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `blog_type` */

insert  into `blog_type`(`bid`,`tid`) values (1,1),(2,1),(13,1),(23,1),(3,2),(4,2),(5,2),(10,2),(7,3),(9,3),(2,4),(3,4),(4,4),(5,4),(6,4),(27,4),(8,5),(24,5),(1,6),(6,6),(7,6),(10,6),(13,6),(24,7),(26,8),(27,8),(28,8);

/*Table structure for table `t_admin` */

DROP TABLE IF EXISTS `t_admin`;

CREATE TABLE `t_admin` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `avatar` varchar(255) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `nickname` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `adminname` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Data for the table `t_admin` */

insert  into `t_admin`(`id`,`avatar`,`create_time`,`email`,`nickname`,`password`,`type`,`update_time`,`adminname`) values (1,'/user-avatar/dajiavatar.jpg',NULL,'1134107721@qq.com','大吉','root',NULL,NULL,'1134107721@qq.com');

/*Table structure for table `t_blog` */

DROP TABLE IF EXISTS `t_blog`;

CREATE TABLE `t_blog` (
  `id` int(20) NOT NULL AUTO_INCREMENT,
  `appreciation` bit(1) NOT NULL,
  `commentabled` bit(1) NOT NULL,
  `content` longtext,
  `create_time` datetime DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `first_picture` varchar(255) DEFAULT NULL,
  `flag` varchar(255) DEFAULT NULL,
  `published` bit(1) NOT NULL,
  `recommend` bit(1) NOT NULL,
  `share_statement` bit(1) NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `views` int(11) DEFAULT NULL,
  `type_id` bigint(20) DEFAULT NULL,
  `admin_id` bigint(20) DEFAULT NULL,
  `comment_count` int(255) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `FK292449gwg5yf7ocdlmswv9w4j` (`type_id`) USING BTREE,
  KEY `FK8ky5rrsxh01nkhctmo7d48p82` (`admin_id`) USING BTREE,
  CONSTRAINT `t_blog_ibfk_1` FOREIGN KEY (`admin_id`) REFERENCES `t_admin` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Data for the table `t_blog` */

insert  into `t_blog`(`id`,`appreciation`,`commentabled`,`content`,`create_time`,`description`,`first_picture`,`flag`,`published`,`recommend`,`share_statement`,`title`,`update_time`,`views`,`type_id`,`admin_id`,`comment_count`) values (1,'','','#  一对多关系\r\n举例：部门和员工的对应关系 :<br>\r\n        1.  正过来看，(\"1\")一个部门里面可以有多个员工(\"n\")\r\n        2. 反过来看一一对应:而一个员工只能对应一个部门<br>\r\n        由于满足上面两条, 所以一对多关系成立, 部门是1 员工是n\r\n        策略： 在多的一方添加外键, 指向一的一方的主键。<br>\r\n        如何在数据库中操作？请看：[在MySQL中添加外键的几种方式(一对多关系)](https://blog.csdn.net/weixin_44757863/article/details/109322657)\r\n\r\n#  多对多关系\r\n 举例：教师与学生<br>\r\n        1. 正过来看，(\"1\")一个老师能教多名学生(\"n\")\r\n        2. 反过来看,  (\"1\")一个学生有多个老师(\"n\")<br>\r\n        策略：增加一张表，专门维护两张表之间的关系。<br>\r\n        **增加中间表之后:中间表与教师表形成了一对多的关系，而且中间表维护了唯一对应的找到表中数据的关系。**<br>\r\n             **同样的学生表与中间表也是一个一对多的关系。一对多的关系可以匹配到关联表中的数据。**<br>\r\n         如何在数据库中操作？请看：[在MySQL中建立多对多关系的映射（建立中间表）](https://blog.csdn.net/weixin_44757863/article/details/109621839)\r\n\r\n# 总结\r\n   总结, 判断一对多还是多对一, **主要取决于反过来看(也就是第二条)**<br>\r\n   * 正反均是一对一       :    一对一\r\n   * 正是一对多,反是一对一  : 一对多\r\n   * 正是一对一,反是一对多  : 多对一(这一条和一对多本质上是一类,只不过是反过来理解罢了)\r\n   * 正反均是一对多         : 多对多\r\n\r\n\r\n        \r\n        \r\n        \r\n','2020-11-16 22:09:28',' 1.  正过来看，(\"1\")一个部门里面可以有多个员工(\"n\")\r\n    2. 反过来看一一对应:而一个员工只能对应一个部门<br>\r\n    由于满足上面两条, 所以一对多关系成立, 部门是1 员工是n\r\n    策略： 在多的一方添加外键, 指向一的一方的主键。<br>\r\n    如何在数据库中操作？请看：[在MySQL中添加外键的几种方式(一对多关系)]','/blog-picture/sql3.jpg','原创','','\0','','【数据库】快速判断一对多，多对多关系，并建立数据库实体之间的映射','2020-12-26 12:29:27',56,0,1,5),(2,'\0','','\r\n\r\n\r\n# 前言\r\n\r\n本文讨论SSM框架下PageHelper的使用，SpringBoot提供的starter方式应该大同小异，用到后会在文章里更新。\r\n# 一、导入jar包\r\n```xml\r\n<!--pagehelper-->\r\n        <dependency>\r\n            <groupId>com.github.pagehelper</groupId>\r\n            <artifactId>pagehelper</artifactId>\r\n            <version>5.1.10</version>\r\n        </dependency>\r\n```\r\n\r\n# 二、使用步骤\r\n先给出中文文档：[MyBatis 分页插件 PageHelper](https://pagehelper.github.io/)，如有需要可详细查阅。\r\n\r\n下面通过一个小demo介绍如何简单使用PageHelper\r\n\r\n\r\n\r\n# 三、常用配置\r\n官方文档上有两种配置方式，笔者采用这一种：\r\n\r\n在 Spring 配置文件中配置拦截器插件（注：也就是配置数据源的那个地方）\r\n使用 spring 的属性配置方式，可以使用 plugins 属性像下面这样配置：\r\n\r\n```xml\r\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\r\n  <!-- 注意其他配置 -->\r\n  <property name=\"plugins\">\r\n    <array>\r\n      <bean class=\"com.github.pagehelper.PageInterceptor\">\r\n        <property name=\"properties\">\r\n          <!--使用下面的方式配置参数，一行配置一个 -->\r\n          <value>\r\n            reasonable=true\r\n          </value>\r\n        </property>\r\n      </bean>\r\n    </array>\r\n  </property>\r\n</bean>\r\n```\r\n注意上面代码中的 reasonable=true，是可以自己配置的，所有的配置都在官方文档中写的明明白白。\r\n\r\n笔者这里只配了reasonable=true。这个属性含义是分页参数合理化，默认值为false， 当该参数设置为 true 时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。\r\n\r\n# 四、小案例演示最简单的分页查询\r\n## 需求：实现分页查询\r\n前端界面是长这样的\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201117095554956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)每页有2个数据，一共n条数据，分成n/2页来查询。（本例有6条数据，分成3页查询）\r\n\r\n而且可以显示出：第几页，共几页，有几个分类\r\n\r\n## 数据库和Dao层的方法\r\n数据库非常简单，就这么几条数据：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201117095447473.png#pic_center)\r\n\r\n而且只用到下面这一个方法，这个方法的作用是把数据库所有东西查出来，并封装到List集合中：\r\n```java\r\nList<Type> queryAllTypes();\r\n```\r\n## Controller层代码：\r\n```java\r\n    @GetMapping(\"/types\")\r\n    public String toTypes(Model model, @RequestParam(defaultValue = \"1\",value = \"pageNum\") Integer pageNum){\r\n        /*\r\n            PageHelper分页插件: 官方文档: https://pagehelper.github.io/docs/\r\n            String orderBy=\"字段名 排序规律\";\r\n            PageHelper.startPage(pageNum, pageSize, orderBy);\r\n         */\r\n        String orderBy = \"id desc\";\r\n        PageHelper.startPage(pageNum,2,orderBy);\r\n        List<Type> list = typeService.queryAllTypes();\r\n        //用PageInfo对结果进行包装\r\n        PageInfo<Type> pageInfo = new PageInfo<Type>(list);\r\n        System.out.println(pageInfo);\r\n        model.addAttribute(\"pageInfo\",pageInfo);\r\n        return \"admin/types\";\r\n    }\r\n```\r\n\r\n解释一下上面的代码。\r\n\r\n1. PageHelper.startPage静态方法是什么？\r\n\r\n	官方文档给明明白白写着：\r\n	![在这里插入图片描述](https://img-blog.csdnimg.cn/20201117100228386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n\r\n\r\n2. order by是啥意思？这个参数官方文档并没有写\r\n\r\n    我上网查到了大神的解决方案。[原博客在此](https://blog.csdn.net/kalnon/article/details/79559627)\r\n\r\n	使用它必须满足 Pagehelper的版本需在5.1.2及以上\r\n\r\n	PageHelper.startPage(pageNum , pageSize);PageHelper.orderBy(\"A B\");\r\n    其中A为排序依据的字段名，B为排序规律，desc为降序，asc为升序\r\n\r\n   或者一步到位\r\n\r\n   String orderBy=\"字段名 排序规律\"；\r\n\r\n   PageHelper.startPage(pageNum, pageSize, orderBy)；\r\n\r\n3. PageInfo啥意思? \r\n	\r\n	是对结果集进行封装，这里把结果集封装后传到了html页面，下面讲html页面还会有解释。\r\n\r\n\r\n## HTML页面：\r\n这里采用thymeleaf模板引擎。\r\n```html\r\n<table class=\"ui compact teal table\">\r\n        <thead>\r\n          <tr align=\"center\">\r\n            <th>ID</th>\r\n            <th>名称</th>\r\n            <th>操作</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n        <!--\r\n            查阅thymeleaf官方文档,并搜索iterStat, 就可知道下面一行的iterStat是啥意思了\r\n            https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html\r\n            英文官方文档难吗?根本不难.\r\n            要对自己的英语水平有自信心.\r\n\r\n            注意的是 为什么是${pageInfo.list} 而不是直接 ${pageInfo}\r\n            非常简单，只需要在后台sout一下pageInfo究竟是个什么东西就知道了：\r\n            PageInfo{pageNum=1, pageSize=2, size=2, startRow=1, endRow=2, total=6, pages=3,\r\n                     list=Page{count=true, pageNum=1, pageSize=2, startRow=0, endRow=2, total=6, pages=3, reasonable=true, pageSizeZero=false}\r\n                     [Type{id=6, name=\'Debug专题\'}, Type{id=5, name=\'SpringBoot\'}],\r\n                     prePage=0, nextPage=2, isFirstPage=true, isLastPage=false, hasPreviousPage=false, hasNextPage=true, navigatePages=8,\r\n                     navigateFirstPage=1, navigateLastPage=3, navigatepageNums=[1, 2, 3]}\r\n            分析一下里面， 有一个list字段。这就是为什么必须是${pageInfo.list}的原因了\r\n            如果将来pageInfo里面传入的是别的属性, 需要在sout一下pageInfo,并分析出前台需要的是什么.\r\n\r\n            By the way, 注意一个字段 reasonable=true.\r\n            这个字段是不是很眼熟,我们在bean里面配置过了, 它生效了!\r\n\r\n\r\n        -->\r\n          <tr align=\"center\" th:each=\"type,iterStat : ${pageInfo.list}\">\r\n            <td th:text=\"${iterStat.count}\">1</td>\r\n            <td th:text=\"${type.name}\">Java专题</td>\r\n            <td>\r\n              <a href=\"#\" class=\"ui mini teal basic button\">编辑</a>\r\n              <a href=\"#\"  class=\"ui mini red basic button\">删除</a>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <th colspan=\"6\" >\r\n              <div class=\"ui inverted divided stackable grid\">\r\n                <div class=\"three wide column\" align=\"center\">\r\n                  <!--\r\n                    理论上讲,我配置了reasonable,这里不需要太多的校验(下同)\r\n                    这里的 pageInfo. 点出来的这么多属性,从哪来的?\r\n                    和上面一样, 在后台sout一下pageInfo究竟是个什么东西就知道了.或者直接查阅官方文档,里面就有pageInfo的属性\r\n                  -->\r\n                  <a class=\"item\" th:href=\"@{/admin/types(pageNum=${pageInfo.prePage})}\" >上一页</a>\r\n                </div>\r\n\r\n                <div class=\"ten wide column\" align=\"center\">\r\n                  <!--这里的 pageInfo. 从哪点出来的这么多属性? 上面代码有解释-->\r\n                  <p>第 <span th:text=\"${pageInfo.pageNum}\"></span> 页，共 <span th:text=\"${pageInfo.pages}\"></span> 页，有 <span th:text=\"${pageInfo.total}\"></span> 个分类</p>\r\n                </div>\r\n\r\n                <div class=\"three wide column\" align=\"center\">\r\n                  <!--同様,这里因为配置了reasonable,理论上不用担心越界问题,也就用不着校验-->\r\n                  <a class=\"item\" th:href=\"@{/admin/types(pageNum=${pageInfo.nextPage})}\">下一页</a>\r\n                </div>\r\n              </div>\r\n              <div align=\"center\">\r\n              <a href=\"#\" th:href=\"@{/admin/typesinput}\">\r\n                <button type=\"button\" class=\"ui teal button m-mobile-wide m-margin-top\"><i class=\"pencil icon\"></i>新增</button>\r\n              </a>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </tfoot>\r\n      </table>\r\n```\r\n观察上面的代码，上面的代码其实就是展示出了本文开头需求的前端页面。有两点需要说一下：\r\n1. PageInfo这个属性从Controller传到了前端，这玩意到底是啥意思？\r\n    查阅官方文档，或者自己在后台systemout一下，就能看出来	 pageInfo究竟是个什么东西。\r\n    懒人们可以直接看下图，下图就是官方解释：\r\n    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201117101707401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)2. 还记得之前配置的reasonable=true这个属性吗？\r\n    这个属性配置之后能大大简化前端的代码。如果不配置的话，前端的判断校验是这么写的：\r\n    ```html\r\n    <a class=\"item\" th:href=\"@{/admin/types(pageNum=${pageInfo.hasPreviousPage}?${pageInfo.prePage}:1)}\" th:unless=\"${pageInfo.isFirstPage}\">上一页</a>\r\n                \r\n    ```\r\n    简而言之就是需要去判断有没有上一页？页码小于零咋办？如果没有下一页如何跳转？等等这些问题。一旦我们配置了reasonable，就全都解决了，一行代码就可以解决，根本不用操心上面的逻辑：\r\n    ```html\r\n    <!--配置完reasonable之后，根本不用校验-->\r\n    <a class=\"item\" th:href=\"@{/admin/types(pageNum=${pageInfo.prePage})}\" >上一页</a>\r\n    ```\r\n\r\n# 总结\r\nPageHelper真是一个非常好用的东西，如果有不会的地方，一定要看官方文档，写的通俗易懂。而且一共就一点内容，就算全看完也不用多少时间，别怕。\r\n','2020-11-03 22:09:28','前言\r\n\r\n本文讨论SSM框架下PageHelper的使用，SpringBoot提供的starter方式应该大同小异，用到后会在文章里更新。','/blog-picture/sql2.jpg','原创','','\0','','【分页查询】在SSM环境中使用PageHelper','2020-12-26 12:26:07',29,0,1,0),(3,'','','\r\n\r\n# 一、应用场景\r\n\r\n在使用SpringMVC（Controller）和thymeleaf（html页面）进行交互时，可以使用model.addAttribute这个方法向前端传递键值对。\r\n\r\n```java\r\nmodel.addAttribute(\"key\", value);\r\n```\r\n\r\n键值对中的键，可以随便取名，值也能传很多种类型。传基本类型大家应该都会，本文就以一个例子抛砖引玉， 传一个对象到html，并用thymeleaf的方法进行接收。\r\n\r\n\r\n# 二、Controller层编写\r\n\r\n\r\n```java\r\n@RequestMapping(\"/login\")\r\n    public String login(Model model){\r\n        //传一个对象进去  用户名是大吉, 密码是123456\r\n        User user = new User(\"大吉\", \"123456\");\r\n            model.addAttribute(\"recentuser\", user);\r\n            return \"前端页面\";\r\n    }\r\n```\r\n代码非常简单， User是我们自己定义的一个对象，只有两个属性，username和password，以及对应的get，set，constructor方法\r\n\r\n```java\r\npublic class User {\r\n    public String username;\r\n    public String password;\r\n\r\n    public User(String username, String password) {\r\n        this.username = username;\r\n        this.password = password;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\n# 三、前端页面接收\r\n```html\r\n<span th:text=\"${recentuser.username}\"></span>\r\n<span th:text=\"${recentuser.password}\"></span>\r\n```\r\n其实非常简单，要填写的内容就是model.attribute里的键。**注意有个地方比较坑，这里的recentuser.username如果写成recentuser.getUsername()就会出错，应该直接写对象的成员变量。**\r\n\r\n\r\n\r\n\r\n','2020-10-01 22:09:28','在使用SpringMVC（Controller）和thymeleaf（html页面）进行交互时，可以使用model.addAttribute这个方法向前端传递键值对。','/blog-picture/thymeleaf.jpg','原创','','\0','','model.addAttribute向前端(thymeleaf)传递对象并接收','2020-12-26 12:30:30',37,0,1,1),(4,'','','\r\n\r\n# 前言\r\nSpringMVC和Thymeleaf组合在一起的问题，比较冷门，一般遇到的也比较少。因为大家在SSM阶段技术选型的时候，一般会选用jsp，学校老师也是这么教的。\r\n一般在SpringBoot阶段用到Thymeleaf模板引擎比较多，而且SpringBoot还有专门的Thymeleaf的启动器，帮我们省去了不少配置。\r\n\r\n但是我在搭建个人博客时，想练习一下SSM，又想摒弃jsp技术，就结合了一下Thymeleaf。但是发现了不少的问题：\r\n\r\n# 一、如何编写SpringMVC的配置文件？\r\n这里对xml进行讨论，笔者用的是xml配置。\r\n一开始我是照着《Spring实战（第四版）》进行配置，书上是这么说的：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201105224237432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n首先看到这里使用了p命名空间，p命名空间注入的特点是使用属性而不是子元素的形式配置Bean的属性，从而简化了配置代码。\r\n\r\n要使用p命名空间，要在xml的开头添加约束：\r\nxmlns:p=\"http://www.springframework.org/schema/p\"\r\n\r\n但是照着这段代码敲完后，出现的第一个问题是新版本的Spring（Spring5），不认识ServletContextTemplateResolver。\r\n\r\n而且解析页面现了中文乱码的问题，所有中文都变成了问号（？）。经过网上多方寻求解决方案，最终确定了如下配置：\r\n\r\n\r\n代码如下：\r\n```xml\r\n<!--\r\n        Spring对thymeleaf支持  Spring实战第四版 P192\r\n        前提:导入pom.xml关于thymeleaf的坐标 而且别忘了加上版本号!!!!!\r\n    -->\r\n    <bean id=\"viewResolver\" class=\"org.thymeleaf.spring5.view.ThymeleafViewResolver\"\r\n          p:templateEngine-ref=\"templateEngine\"\r\n          p:characterEncoding=\"UTF-8\"\r\n    />\r\n    <bean id=\"templateEngine\" class=\"org.thymeleaf.spring5.SpringTemplateEngine\"\r\n          p:templateResolver-ref=\"templateResolver\"/>\r\n    <!--\r\n        下面这个bean不能完全照着Spring实战配 会出问题.我搜了一下网上的大神有解决方案:\r\n        解决方案我已经收藏在csdn的收藏夹里面了\r\n        https://blog.csdn.net/qq_31782587/article/details/73550504\r\n\r\n        然后又冒出了一个巨大的坑,卡了我2小时! 就是thymeleaf集成springMVC, 走controller之后会出现中文乱码!!\r\n        看https://www.cnblogs.com/zhi-leaf/p/10594353.html  解决方案在这里面\r\n        其实就是配置2次 p:characterEncoding=\"UTF-8\" (自己搜索这句话,在哪里配置了2次)\r\n    -->\r\n    <bean id=\"templateResolver\" class=\"org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver\"\r\n          p:prefix=\"/WEB-INF/pages/\"\r\n          p:suffix=\".html\"\r\n          p:templateMode=\"HTML5\"\r\n          p:characterEncoding=\"UTF-8\"\r\n    />\r\n```\r\n\r\n\r\n\r\n\r\n\r\n# 二、启动服务器之后，页面html的代码显示不全\r\n问题的描述是，我的一个页面，启动之后发现页面内容显示不全，右键查看网页源代码，发现源代码根本就没显示完全，而是从中间截断了，只显示了三分之一不到的行数，拉进度条死活拉不下去了。\r\n\r\n如下图所示，在浏览器中查看源代码，发现显示到这就到此为止了。\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201105225359154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n后来我通过注释掉一些代码，精准找到了问题的原因：\r\n\r\n在idea中代码是这样的：\r\n\r\n```xml\r\n<div class=\"ui inverted link list\">\r\n     <a class=\"item m-text-lined\" th:each=\"newBlog,iter:${newBlogs}\" th:href=\"@{\'/page_blog/\'+${newBlog.getId()}}\" th:text=\"${newBlog.getTitle()}\">博客1</a>\r\n</div>\r\n```\r\n到浏览器时，代码却是这样的：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201105225749242.png#pic_center)\r\n发现里面的a标签以及里面的 th：（thymeleaf相关代码）居然被浏览器给吃了？！\r\n\r\n那么问题就迎刃而解了，其实是Thymeleaf的报错，这个th字段里面的东西出错了，编译器也报红了，我没注意，所以就出现了这么个奇葩问题。\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201105230047283.png#pic_center)\r\n# 总结\r\n使用冷门技术栈组合难免会遇到各种各样的问题，不过大都是配置上的，之前用SpringBoot给我们屏蔽掉太多配置细节了，换回SSM的方式，简直是配置地狱。不过解决这些问题之后，业务代码的开发流程和SpringBoot别无二致。\r\n\r\n\r\n','2020-07-15 22:09:28','SpringMVC和Thymeleaf组合在一起的问题，比较冷门，一般遇到的也比较少。因为大家在SSM阶段技术选型的时候，一般会选用jsp，学校老师也是这么教的。\r\n一般在SpringBoot阶段用到Thymeleaf模板引擎比较多，而且SpringBoot还有专门的Thymeleaf的启动器，帮我们省去了不少配置。\r\n\r\n但是我在搭建个人博客时，想练习一下SSM，又想摒弃jsp技术，就结合了一下Thy','/blog-picture/thymeleaf.jpg','原创','','\0','','SpringMVC整合Thymeleaf中文乱码问题，html代码显示不全','2020-12-26 12:31:05',34,0,1,2),(5,'','','\r\n# 项目场景：\r\n\r\n在使用SpringMVC开发时，我想使用JavaWeb的方式传递数据（形如如下代码）：\r\n\r\nrequest.getRequestDispatcher().forward(request,response)\r\n\r\nresponse.sendRedirect()\r\n\r\n发现SpringMVC通过视图解析器帮我们自动做了这一步，只需要在return语句中返回字符串形式就可以实现forward和redirect操作了。但是这个return语句应该怎么填才能被SpringMVC正确识别呢？\r\n\r\n# 原因分析：\r\n\r\n**First of all, 要用redirect和forward, 如果你想要返回一个页面的话, 都得写一个controller!**\r\n\r\n 就算这个controller啥也不做, 那也得写一个controller, 让这页面走视图解析器。\r\n \r\n ```java\r\n     @RequestMapping(\"/activationemail\")\r\n     public String activationemail(){return \"activationemail\";}\r\n```\r\n \r\n **然后讲解一下redirect和forward的写法：**\r\n \r\n 经过在idea中的实测，以下四种写法都是ok的\r\n \r\n1. redirect：\r\n  return \"redirect:/register\";------------ ok  \r\n  return \"redirect:/register.html\"; ------------ ok\r\n 以上这两种写法都是ok的 加不加html  对于redirect是一样的\r\n\r\n2. forward：\r\n  return \"forward:/activationemail\"; ------------ ok\r\n  return \"forward:/activationemail.html\"; ------------ ok\r\n 同样的, 上面的写法对于forward也成立. **但是有一个大坑, forward不能forward到自己的@RequestMapping(\"\")里面去**\r\n \r\n 解释一下  假如你是在标记 @RequestMapping(\"aaaaaa\") 的方法里面调用forward, 那你就不能这样写:\r\n  return \"forward:/aaaaaa\"; 否则就会报400错误\r\n\r\n\r\n# Spring方式的forward和redirect：\r\n> 下面是关于redirect和forward方式的区别：\r\n　　redirect方式相当于”response.sendRedirect()”. 这种方式浏览器地址栏最后显示的路径是转发后的新的路径。\r\n    工作方式是这样的, 服务器端会首先发一个response给浏览器, \r\n    然后浏览器收到这个response后再发一个requeset给服务器, 然后服务器发新的response给浏览器. \r\n    这时页面收到的request对象是重新从浏览器发来的。这种方式的特点：\r\nA.在转发前后有两个不同的request对象,转发前后的两个控制器在request上的参数(request.getParameter())和request属性(request.getAttribute())不能共享;\r\nB.如果转发前后的两个控制器都配置在spring 拦截器范围内,这样拦截器会拦截前后两个request,即会拦截两次;\r\nC.最后返回到浏览器后,因为地址栏显示的是转发后的url,所以刷新页面时只会执行后面的url映射的控制器.\r\n 　　forward方式相当于request.getRequestDispatcher().forward(request,response)，\r\n    这种方式的外部特征是浏览器地址显示的路径是转发前的路径。\r\n    工作方式是这样,forward 发生在服务器内部,在前一个控制器处理完毕后,直接进入下一个控制器处理, \r\n    并将最后的response发给浏览器. 这种方式的特点：\r\nA.转发前后是同一个request,后一个控制器可共享前一个控制器的参数与属性;\r\nB.因为是同一个request,拦截器只会拦截前一个url,如果前一个url在映射时未配置到拦截器拦截，则拦截后一个url，即只拦截一次;\r\nC.最后返回到浏览器后,因为地址栏显示的是转发前的url,所以刷新页面时会依次执行前后两个控制器.\r\n\r\n上面引用的是网络上的解释，[原文在此](https://www.cnblogs.com/lexiaofei/p/7044429.html?utm_source=itdadao&utm_medium=referral)\r\n\r\n解释一下，上面这么一大段, 都很重要, 简明扼要地说就是：\r\n\r\n redirect方式相当于”response.sendRedirect()”. 这种方式浏览器地址栏最后显示的路径是转发后的新的路径。最后返回到浏览器后,因为地址栏显示的是转发后的url,所以刷新页面时只会执行后面的url映射的控制器.\r\n \r\n forward方式相当于request.getRequestDispatcher().forward(request,response)，最后返回到浏览器后,因为地址栏显示的是转发前的url,所以刷新页面时会依次执行前后两个控制器.\r\n\r\n\r\n\r\n','2020-10-08 22:09:28','项目场景：\r\n\r\n在使用SpringMVC开发时，我想使用JavaWeb的方式传递数据（形如如下代码）：\r\n\r\nrequest.getRequestDispatcher().forward(request,response)\r\n\r\nresponse.sendRedirect()\r\n\r\n发现SpringMVC通过视图解析器帮我们自动做了这一步，只需要在return语句中返回字符串形式就可以实现forward和red','/blog-picture/html1.jpg','原创','','\0','','在SpringMVC中使用forward和redirect','2020-12-26 12:20:50',33,0,1,3),(6,'','','\r\n\r\n# 前言\r\n\r\n本文记一下在GitHub上面克隆的maven项目，如何一步一步导入idea，并成功跑起来的方法。\r\n\r\n\r\n**本文均以最坏情况为例，假设你idea打开项目之后啥都没动过，也啥都没有配置过。这样可以尽可能地模拟并解决大多数情况。**\r\n# 一、导入项目\r\n## 1.选择open\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201101234414855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n点击open，然后路径到你项目的根目录即可。\r\n## 2.配置Spring（假如你项目不是基于Spring，可跳过）\r\n如果你打开Spring的配置文件（我这里是applicationContext.xml），发现了下图信息：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201101235033521.png#pic_center)\r\n那么就点击右边的 Create Spring facet![在这里插入图片描述](https://img-blog.csdnimg.cn/20201101235101641.png#pic_center)\r\n\r\n然后打开Project Structure -> Facets，看到本来空空如也的Facets多了Spring，那就说明这一步成功了。\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201101235337834.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n别急，还没完，继续打开你的Spring配置文件，如果还报像上图一样的黄色错误，那么继续点击右边（Configure application context）\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201101235705745.png#pic_center)\r\n选择 Create new application context\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201101235726103.png#pic_center)\r\n将项目整个打上勾勾，点确定：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201101235753168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n如下图所示，做完这一步，再打开project struture，如果发现又多出来了配置信息，说明这一步正确。\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201101235940845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n\r\n# 二、添加web并配置Artifacts\r\n## 添加web\r\n如下图操作：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102001003144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102001015588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n最后点击Apply 和 OK。\r\n## 配置Artifacts\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102001210389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n最后点击Apply 和 OK。\r\n\r\n# 三、配置tomcat\r\n按照图片一步一步来，不解释。\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102000137621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102000239998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n最后点击 Apply ， OK 即可创建一个Tomcat服务器\r\n看下图，走到这步，假如你有artifit选项，那么就直接添加就完了。\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102000748649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n\r\n\r\n但是你如果没有这么个选项，如下图所示：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201102000553474.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n那么你就需要倒回上一步，去配置Artifacts。这样你就能成功添加了。\r\n\r\n# 四、添加lib目录（idea的bug，大坑！）\r\n按照道理，应该现在就能启动tomcat跑了,但是如果你启动Tomcat报ClassNotFoundException，那么请看这篇文章：idea启动tomcat报错：ClassNotFoundException（找不到jar包）\r\n\r\n# 后记\r\n照着之前的四步做了，你的项目仍然无法运行或是运行时报错，那就应该检查一下其他的环境是否匹配（是否连上数据库？默认端口号是否占用或修改？JDK版本是否不支持等等）。最后希望大家都能成功运行项目。\r\n','2020-07-14 22:09:28','本文记一下在GitHub上面克隆的maven项目，如何一步一步导入idea，并成功跑起来的方法。\r\n\r\n**本文均以最坏情况为例，假设你idea打开项目之后啥都没动过，也啥都没有配置过。这样可以尽可能地模拟并解决大多数情况。**','/blog-picture/idea.jpg','原创','','\0','','记一次idea导入maven项目的流程','2020-12-26 12:32:15',69,0,1,7),(7,'','','\r\n\r\n# 前言\r\n\r\n在解决复杂问题时，有一个非常实用的工具就是思维导图，它简单易上手。其实在大二时老师有讲过思维导图的绘制，但是自己一直懒得用，一是习惯了记文字笔记，二是平常编码用的是电脑，惧怕在线工具的学习成本。<br>\r\n但是笔者最近在找开源项目，设计项目模块时，用传统笔记方式已经不太能胜任了，痛定思痛之下，决定学一下思维导图的绘制要点以及使用在线软件绘制，经过学习发现简单到超乎想象。\r\n\r\n\r\n\r\n这里笔者推荐使用一款叫[GitMind](https://gitmind.cn/)的工具在线绘制思维导图，并总结一下思维导图的绘制要点。\r\n\r\n# 一、什么是思维导图？\r\n\r\n思维导图，英文是The Mind Map，又叫心智导图，是表达发散性思维的有效图形思维工具 ，它简单却又很有效，是一种实用性的思维工具。\r\n\r\n思维导图的最大的两个好处就是方便记忆和理清思路，同时思维导图特殊的记录方式也便于捕捉跳跃思考。\r\n\r\n\r\n\r\n\r\n\r\n# 二、思维导图的绘制要点\r\n我认为，虽然大家都知道思维导图的定义，但是先别着急上手画，得先知道一点思维导图的基本绘制方法，这样才能最大化思维导图的威力。\r\n\r\n\r\n这里给出知乎的一篇链接: [如何自学思维导图？](https://www.zhihu.com/question/23413559/answer/37813881)\r\n\r\n\r\n\r\n\r\n总结一下：\r\n1.绘制主题，主题一般就在思维导图整张图的中心位置。<br>\r\n2.提炼关键词，关键词一定要做到一目了然，突出主题\r\n\r\n3.绘制主干，是从中心主题延伸出来的几条分支，是大的分类。主干线条要粗。\r\n4.绘制支干，支干是从主干延伸出来的，是小的分类。支干线条要细于主干。\r\n最后我觉得很重要的一点是，善于给主干和支干上的结点添加超链接，或是令人一目了然的小图标。\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201101214418942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n\r\n\r\n# 三、使用GitMind工具快速制作思维导图\r\n市面上好用的思维导图工具有很多推荐，笔者从易用性考虑，排除了重量级的（需要下载安装对应软件），收费的，不能跨平台的，最终选用了[GitMind](https://gitmind.cn/)这款简单粗暴的工具绘制。\r\n\r\n个人认为这款工具的最大优势是**学习成本非常低**，有一个[极其简单的教程](https://gitmind.cn/faq/how-to-use-gitmind.html#_5-4-chapter)，可以说是上手即会。而且就算你不会，该工具还提供大量免费模板，只需要套用模板修改掉结点内的文字就能变成你自己的。\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201101213927837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n\r\n# 总结\r\n这就是我的思维导图推荐和总结了，感觉最难的是下决心搞这个东西，觉得难，怕麻烦，但是这玩意真的很简单。只需要挤出一点点时间，就能学会一个强大工具的使用，何乐而不为呢？\r\n','2020-08-09 22:09:28','在解决复杂问题时，有一个非常实用的工具就是思维导图，它简单易上手。其实在大二时老师有讲过思维导图的绘制，但是自己一直懒得用，一是习惯了记文字笔记，二是平常编码用的是电脑，惧怕在线工具的学习成本。<br>\r\n但是笔者最近在找开源项目，设计项目模块时，用传统笔记方式已经不太能胜任了，痛定思痛之下，决定学一下思维导图的绘制要点以及使用在线软件绘制，经过学习发现简单到超乎想象。','/blog-picture/html3.jpg','原创','','\0','','思维导图的绘制要点及使用GitMind工具快速制作思维导图','2020-12-26 12:27:24',52,0,1,4),(8,'','','\r\n\r\n# 前言\r\n\r\n本篇文章列举了SpringBoot（基于版本2.3.4）阶段，需要引入到pom.xml的常用坐标。这是一篇工具博客，需要什么就拿什么。\r\n\r\n\r\n\r\n\r\n### SpringBoot-Web启动器\r\n用于开启web支持\r\n```xml\r\n<!--启动器-->\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n```\r\n\r\n### 测试test启动器\r\n```xml\r\n<dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-test</artifactId>\r\n        <scope>test</scope>\r\n        <exclusions>\r\n            <exclusion>\r\n                <groupId>org.junit.vintage</groupId>\r\n                <artifactId>junit-vintage-engine</artifactId>\r\n            </exclusion>\r\n        </exclusions>\r\n    </dependency>\r\n```\r\n### ThymeLeaf相关\r\n用哪一套都行\r\n```xml\r\n<!--Thymeleaf 版本的问题, 可以查看一下springboot对应的Thymeleaf的版本(现在的是3.0.11)-->\r\n<dependency>\r\n    <groupId>org.thymeleaf</groupId>\r\n    <artifactId>thymeleaf-spring5</artifactId>\r\n    <!--注意这里的版本问题,下同,以下都要写版本-->\r\n    <version>3.0.11.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.thymeleaf.extras</groupId>\r\n    <!--这里是Java8运行时，注意一下-->\r\n    <artifactId>thymeleaf-extras-java8time</artifactId>\r\n    <version>3.0.4.RELEASE</version>\r\n</dependency>\r\n```\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n</dependency>\r\n```\r\n### JDBC相关\r\n```xml\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jdbc</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-jdbc</artifactId>\r\n</dependency>\r\n```\r\n### Druid\r\n```xml\r\n<!-- alibaba 德鲁伊 -->\r\n<dependency>\r\n    <groupId>com.alibaba</groupId>\r\n    <artifactId>druid</artifactId>\r\n    <version>1.1.21</version>\r\n</dependency>\r\n```\r\n### MyBatis相关\r\n```xml\r\n<!--mybatis-->\r\n<dependency>\r\n    <groupId>org.mybatis.spring.boot</groupId>\r\n    <artifactId>mybatis-spring-boot-starter</artifactId>\r\n    <version>2.1.3</version>\r\n</dependency>\r\n```\r\n### mysql-connector-java\r\n```xml\r\n<!--MySQL-->\r\n<dependency>\r\n    <groupId>mysql</groupId>\r\n    <artifactId>mysql-connector-java</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```\r\n### Spring Security相关\r\nspring-security\r\n```xml\r\n<!--spring-security-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n```\r\nsecurity-thymeleaf整合包\r\n```xml\r\n<!--security-thymeleaf整合包-->\r\n<!--有了这个东西,我们可以在thymeleaf(前端)里面尝试一些springsecurity的操作-->\r\n<dependency>\r\n    <groupId>org.thymeleaf.extras</groupId>\r\n    <artifactId>thymeleaf-extras-springsecurity5</artifactId>\r\n    <version>3.0.4.RELEASE</version>\r\n</dependency>\r\n```\r\n### Shiro相关\r\n```xml\r\n	    <dependency>\r\n            <groupId>org.apache.shiro</groupId>\r\n            <artifactId>shiro-core</artifactId>\r\n            <version>1.4.1</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>jcl-over-slf4j</artifactId>\r\n            <version>1.7.21</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-log4j12</artifactId>\r\n            <version>1.7.21</version>\r\n        </dependency>\r\n```\r\nShiro集成SpringBoot，以及整合ThymeLeaf\r\n```xml\r\n        <!--shiro整合spring的包-->\r\n        <dependency>\r\n            <groupId>org.apache.shiro</groupId>\r\n            <artifactId>shiro-spring</artifactId>\r\n            <version>1.4.1</version>\r\n        </dependency>\r\n        <!--Shiro整合thymeleaf-->\r\n        <dependency>\r\n            <groupId>com.github.theborakompanioni</groupId>\r\n            <artifactId>thymeleaf-extras-shiro</artifactId>\r\n            <version>2.0.0</version>\r\n        </dependency>\r\n```\r\n\r\n### yaml给属性赋值工具\r\n```xml\r\n<!--解决yaml给属性赋值,注解报红的问题-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-configuration-processor</artifactId>\r\n    <optional>true</optional>\r\n</dependency>\r\n```\r\n\r\n### log4j\r\n```xml\r\n	<!--log4j-->\r\n<dependency>\r\n    <groupId>log4j</groupId>\r\n    <artifactId>log4j</artifactId>\r\n    <version>1.2.17</version>\r\n</dependency>\r\n```\r\n### lombok(作用于pojo)\r\n```xml\r\n<!--lombok-->\r\n<dependency>\r\n    <groupId>org.projectlombok</groupId>\r\n    <artifactId>lombok</artifactId>\r\n</dependency>\r\n```\r\n### 开启参数校验\r\n```xml\r\n<!--开启参数校验(应用在pojo)-->\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-validation</artifactId>\r\n</dependency>\r\n```\r\n### Swagger相关\r\n```xml\r\n<!--swagger-->\r\n        <dependency>\r\n            <groupId>io.springfox</groupId>\r\n            <artifactId>springfox-swagger2</artifactId>\r\n            <version>2.9.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.springfox</groupId>\r\n            <artifactId>springfox-swagger-ui</artifactId>\r\n            <version>2.9.2</version>\r\n        </dependency>\r\n     \r\n```\r\n### 邮件相关\r\n```xml\r\n		<dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-mail</artifactId>\r\n        </dependency>\r\n```\r\n### Dubbo+Zookeeper相关\r\nDubbo:\r\n```xml\r\n		<dependency>\r\n            <groupId>org.apache.dubbo</groupId>\r\n            <artifactId>dubbo-spring-boot-starter</artifactId>\r\n            <version>2.7.3</version>\r\n        </dependency>\r\n```\r\nzookeeper:\r\n```xml\r\n	<!--zkclient-->\r\n<dependency>\r\n     <groupId>com.github.sgroschupf</groupId>\r\n     <artifactId>zkclient</artifactId>\r\n     <version>0.1</version>\r\n</dependency>\r\n        <!-- 引入zookeeper -->\r\n<dependency>\r\n   <groupId>org.apache.curator</groupId>\r\n   <artifactId>curator-framework</artifactId>\r\n   <version>2.12.0</version>\r\n</dependency>\r\n<dependency>\r\n   <groupId>org.apache.curator</groupId>\r\n   <artifactId>curator-recipes</artifactId>\r\n   <version>2.12.0</version>\r\n</dependency>\r\n<dependency>\r\n   <groupId>org.apache.zookeeper</groupId>\r\n   <artifactId>zookeeper</artifactId>\r\n   <version>3.4.14</version>\r\n   <!--排除这个slf4j-log4j12,可能会引起日志冲突-->\r\n   <exclusions>\r\n       <exclusion>\r\n           <groupId>org.slf4j</groupId>\r\n           <artifactId>slf4j-log4j12</artifactId>\r\n       </exclusion>\r\n   </exclusions>\r\n</dependency>\r\n```\r\n# 随着技术栈进步，待补充……\r\n','2020-10-03 22:09:28','本篇文章列举了SpringBoot（基于版本2.3.4）阶段，需要引入到pom.xml的常用坐标。这是一篇工具博客，需要什么就拿什么。','/blog-picture/springboot.jpg','原创','','\0','','SpringBoot阶段pom.xml的常用坐标','2020-12-26 12:33:57',26,0,1,2),(9,'','','\r\n# 前言\r\n\r\n学习框架以来，虽然代码量，耦合度大大减少，但是框架都有轻代码，重配置的特点，导致各种配置纷繁复杂，就算使用了注解开发，前后端互相传递数据，接收参数，也容易让初学者搞混。\r\n\r\n如果你是看网上的视频自学，跟着视频写Demo，调用关系更是让人头大，很多种情况都是为了完成一个业务，传参，调用关系动不动就涉及到好几个文件，注释都不知道从哪开始写。所以笔者总结了一套比较有用的注释方法，能比较高效的注释Demo中的代码，理清业务之间的关系。而且隔较久时间，日后回看仍然能够清晰明了。\r\n\r\n\r\n\r\n本文是学习方法总结，不涉及任何技术和代码讨论。但是不管是什么语言，什么技术都可以通过这种方法加代码注释，屡试不爽。\r\n\r\n# 一、编写Readme.md\r\n\r\n\r\n在每一个模块里面至少新建一个Readme.md文件（文件名可以自己起，叫dog.md都行），到模块的根目录。这个Readme.md可以总结一下这个Demo/项目到底是干什么的，用到的知识点，技术点是什么。\r\n\r\n日后如果回看代码，先去找这个Readme.md, 就大概知道这个模块究竟干了什么事情了。非常方便。\r\n\r\n下面举个例子，看我在Readme.md里面究竟写了啥：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201024190219771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n这个Demo是我好几个月前写的了，但是今天打开Readme.md一看，感觉一目了然，很快的回忆起来了相关的知识点。\r\n\r\n# 二、科学编写注释\r\n前文中说过，写复杂Demo的注释是一件让人头大的事情，很多种情况都是为了完成一个业务，传参，调用关系动不动就涉及到好几个文件，注释都不知道从哪开始写。\r\n\r\n经过多次总结，优化，笔者发现了一种方法。\r\n\r\n经过分析可知，绝大多数的业务代码都可以被拆分成三部分，分别是：\r\n\r\n* **需求(应用场景)**\r\n* **关联文件(为解决这一个业务需求，需要调用的文件们)**\r\n* **解决方案**\r\n\r\n分析完毕，下面逐条介绍究竟该怎么做\r\n\r\n## 第一步：在注释中编写需求(应用场景)\r\n\r\n需求（应用场景）的意思是： 为什么要写这些代码啊？折腾来折腾去是为了什么？这个技术应用的是哪些场景？ </br> \r\n\r\n那么我们开始写注释，也就可以从这里写起了。**先用一两句话，言简意赅地说明需求。**\r\n\r\n## 第二步：在注释中编写关联文件\r\n举个例子：\r\n\r\n现在我们要完成一个业务，需求是：在侧边栏中, 谁被选中,谁就高亮。\r\n\r\n要完成这件事，需要动以下这么几个文件的代码： a.html, b.html , c.java , d.properties \r\n\r\n好，那么上述几个文件就是该需求的关联。但是我们还需要找一个地方，写下来这么个关联关系。这个地方可以是上文说的Readme.md。于是我们就可以在Readme.md中这样写 :\r\n\r\n>需求(应用场景) : 在侧边栏中, 谁被选中,谁就高亮.\r\n></br>\r\n>关联文件 : a.html ,  b.html ,  c.java , d.properties \r\n   在以上四个文件中，Ctrl+F 搜索主键：高亮侧边栏。\r\n\r\n上面提到了主键，这里我借用了数据库的主键概念做类比。如果你的a.html ,  b.html ,  c.java , d.properties 这四个文件有成百上千行，你想迅速在这4个关联文件中找到和该需求相关的地方，效率是非常低下的。**所以我就定义了这么一个主键的概念，方便快速在关联文件中搜索与该业务相关的代码。**\r\n\r\n主键最好定义成言简意赅的短语，或者英语单词。将主键放在关联文件中与该业务相关的代码附近，如果你想找到它，那就Ctrl+F，搜索主键，就能快速定位。\r\n\r\n刚才这个例子的主键，我就叫中文：高亮侧边栏。只要能快速搜索到就行\r\n\r\n## 第三步：在注释中编写解决方案\r\n第三步是最简单的，也是大家都会做的。无非就是写注释或者伪代码，这个地方怎么做？怎么实现？这个代码什么意思？\r\n\r\n解决方案部分，可以写在Readme.md里，也可以注释在各个关联文件的主键下面。建议写在各个关联文件中。就和平时在代码上面加注释一样，比较方便，没有特殊要求。在相关文件中搜索主键立刻就能看到旁边的注释，非常方便。\r\n\r\n\r\n# 总结\r\n我自己用了该方法加注释，学习，分析完调用关系之后，感觉思路清晰了不少，也能减轻看陈年代码看不懂的问题。大家都知道，将来找工作写业务代码的时候，Demo到用时方知少的道理。但是你如果连你平日自己写的Demo注释都看不懂，那不就凉凉了。\r\n\r\n学习方法的总结，不止这一篇。我是一个文科生，自学编程以来，不停的踩坑，记录，总结，现在觉得高中时学的哲学还是有效的。运用科学的方法论可以帮我们理清思路，提高学习工作效率。\r\n','2020-08-01 22:09:28','学习框架以来，虽然代码量，耦合度大大减少，但是框架都有轻代码，重配置的特点，导致各种配置纷繁复杂，就算使用了注解开发，前后端互相传递数据，接收参数，也容易让初学者搞混。','/blog-picture/geek1.jpg','原创','','\0','','总结一个非常有用的框架学习方法（非常有效！）','2020-12-26 12:08:57',53,0,1,1),(10,'','','\r\n\r\n\r\n# 前言\r\n\r\n学完RESTful风格之后，一直想总结一下它的基本使用，下文以一个简单案例的形式，创建一个使用RESTful风格的基本场景。\r\n\r\n\r\n\r\n# 一、RESTful风格是什么？\r\n\r\n现在的大多数网页都在用RESTful风格，它是一种风格，而不是一种技术。利用这种风格设计路由比较简洁高效。\r\n\r\nRESTful风格特点：\r\n>引自百度百科：\r\n1、每一个URI代表1种资源；\r\n2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；\r\n3、通过操作资源的表现形式来操作资源；\r\n4、资源的表现形式是XML或者HTML；\r\n5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。\r\n\r\n# 二、搭建环境：\r\n非常简单，需要以下3个文件，前两个html个文件有用的代码只有一行。\r\n\r\n## 1. get.html\r\n顾名思义，这个html里面，使用get的方式，向Controller发起请求。\r\n\r\n代码如下：\r\n```html\r\n<a href=\"/demo\" methods=\"get\">查询操作</a>\r\n```\r\n里面执行的是查询（获取资源）操作\r\n## 2. post.html\r\n顾名思义，这个html里面，使用post的方式，向Controller提交表单。\r\n\r\n代码如下：\r\n```html\r\n<form action=\"/demo\" method=\"post\">\r\n	<!--里面是一个表单，只需要记住这是一个添加/更新操作就行了-->\r\n</form>\r\n```\r\n里面执行的是新建（更新）资源的操作\r\n## 3. Controller.java\r\n顾名思义，这个Java就是Controller层。它负责用不同的方式（@GetMapping和@PostMapping）来接收同一个链接\r\n\r\n```java\r\n    @GetMapping(\"/demo\")\r\n    public String query(){\r\n        //接收get.html里面的get请求，执行查询（获取资源）操作\r\n    }\r\n    @PostMapping(\"/demo\")\r\n    public String add(){\r\n		//接收post.html里面的post请求，执行新建（更新）资源的操作\r\n    }\r\n```\r\n\r\n可以看到这两个方法，共用一个链接,  但是却是不同的业务。\r\n\r\n这两个方法上面的注解，还可以用下面这种写法：\r\n```java\r\n@RequestMapping(name= \"/demo\", method = RequestMethod.GET);\r\n@RequestMapping(name= \"/demo\", method = RequestMethod.POST);\r\n```\r\n通过这种方法也可以显式地说明要接收的类型。\r\n\r\n除了使用get和post，其实还有以下几种注解适用于RESTful风格：\r\n\r\n@GetMapping\r\n@PostMapping\r\n@PutMapping\r\n@DeleteMapping\r\n@PatchMapping\r\n\r\n看完这些，再重新理解一下这段话：\r\n>客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；\r\n><br>\r\n>通过操作资源的表现形式来操作资源；\r\n\r\n这就是最简单应用RESTful风格的场景。\r\n\r\n# 三、@PathVariable简单介绍\r\n在一些描述RESTful风格的文章中，我们经常在形参列表中发现@PathVariable这么个注解。顺便做个记录吧。要说起它来，建议和@RequestParam对比学习。下面有一篇文章链接，详细说明了@RequestParam和@PathVariable的区别\r\n\r\n[@RequestParam和@PathVariable的用法与区别](https://blog.csdn.net/a15028596338/article/details/84976223)\r\n\r\n简单说来, PathVariable英文直译是路径变量, 它可以接收请求路径中占位符的值，\r\nRequestParam就负责接收前端传来的形如 name=value 的键值对。\r\n\r\n以上是我的个人见解，欢迎大家讨论，指正。\r\n','2020-10-28 22:09:28','学完RESTful风格之后，一直想总结一下它的基本使用，下文以一个简单案例的形式，创建一个使用RESTful风格的基本场景。','/blog-picture/geek3.jpg','原创','','\0','','简单介绍RESTful风格','2020-12-26 12:33:11',22,0,1,0),(13,'','','\r\n# 前言\r\n这篇文章适用的是多对多关系，如何判断一对多，多对多关系？请点下面的链接：\r\n[【数据库】快速判断一对多，多对多关系，并建立数据库实体之间的映射](https://blog.csdn.net/weixin_44757863/article/details/109614230)\r\n# 一、创建两张要建立多对多关系的表\r\n**众所周知在创建一对多映射时，要在多的一方添加外键。** 但是在建立多对多关系的映射时，我们要借助一张中间表，并在中间表里添加外键，所以两张表的建表语句就是正常的建表语句，只需要添加每个表本身的字段即可，不需要添加额外属性。\r\n\r\n随便举个例子吧，route表（线路）和user表（用户），它们两个表是多对多关系，每个用户可以收藏多个线路，每个线路也可以被多个用户收藏。\r\n\r\n然后route表和user表只需要有其基本的字段即可。\r\n\r\n# 二、建立中间表\r\n多对多关系实现需要借助第三张中间表。中间表至少包含两个字段,这两个字段作为第三张表的外键,分别指向两张表的主键。\r\n如下图所示：\r\n（图系本人于黑马程序员视频学习总结）\r\n\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201111150939349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n建立中间表的SQL语句如下：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201111151032616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n# 三、可视化建立\r\n懒人们可以使用下面的方法，打开SQLyog自带的架构设计器可视化建立关联。\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201111145522856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n\r\n','2020-11-23 19:17:04','众所周知在创建一对多映射时，要在多的一方添加外键。 但是在建立多对多关系的映射时，我们要借助一张中间表，并在中间表里添加外键，所以两张表的建表语句就是正常的建表语句，只需要添加每个表本身的字段即可，不需要添加额外属性。\r\n\r\n随便举个例子吧，route表（线路）和user表（用户），它们两个表是多对多关系，每个用户可以收藏多个线路，每个线路也可以被多个用户收藏。\r\n\r\n然后route表和user表只需要有','/blog-picture/sql1.jpg','原创','','\0','','在MySQL中建立多对多关系的映射（建立中间表）','2020-12-26 12:28:52',22,0,1,2),(23,'','','# 需求\r\n之前只会在Windows环境下使用 Redis，现在想在本地环境下写代码，连接到远程服务器(笔者使用阿里云)上面的Redis.\r\n# 远程服务器端\r\n## 1. 连接到远端，打开redis.conf\r\n首先使用Xshell或SecureCRT连接到你的远程服务器，然后cd到你的redis安装目录，找到redis.conf文件夹：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201217231944822.png)\r\n## 2.修改redis.conf的配置\r\n使用vim工具打开并编辑该文件：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201217232046891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)**需要找到并修改以下几个地方：**\r\n\r\n> 提示，vim下如何搜索字符串：\r\n	命令模式下，输入：/字符串\r\n	比如搜索user, 输入/user\r\n	按下回车之后，可以看到vim已经把光标移动到该字符处和高亮了匹配的字符串\r\n\r\n\r\n\r\n*  daemonize yes\r\n* protected-mode no\r\n* 注释掉 bind 127.0.0.1\r\n* requirepass 你的密码  （设置访问redis的密码）\r\n\r\n修改完毕之后记得wq保存\r\n\r\n## 3.重启redis服务\r\n进入你的redis安装目录下的**src目录**：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201217232939488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)先关闭：	```redis-cli shutdown```\r\n\r\n再启动：```redis-server /usr/redis-5.0.10/redis.conf```\r\n## 4.打开客户端，输入密码验证\r\n最后打开cli端，输入密码（见下图）\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201217233334993.png)\r\n\r\nping -> pong\r\n\r\n成功 !\r\n\r\n## 5.配置防火墙/安全组\r\n如果你是阿里云服务器，那你就进入云控制台，开启6379(Redis的默认端口号)。其他服务器类似\r\n\r\n然后回到你的Linux，\r\n\r\n开启6379端口：```firewall-cmd --zone=public --add-port=6379/tcp --permanent```\r\n重启防火墙：```systemctl restart firewalld.service```\r\n\r\n**到此为止，Linux那边就配置好了。下面看本地代码**\r\n\r\n# Jedis方式连接到远程服务器\r\n前提是导入相关jar包\r\n\r\n代码如下（第一行写你的远程服务器地址）：\r\n```java\r\n    public static void main(String[] args) {\r\n        //假如连本地就是127.0.0.1  我这里是连接的远程阿里云\r\n        Jedis jedis = new Jedis(\"xx.xxx.xxx.xx\",6379);\r\n        //输入redis-cli端设置的密码\r\n        jedis.auth(\"你设置的密码\");\r\n        System.out.println(jedis.ping());\r\n\r\n    }\r\n```\r\n\r\n运行结果：如果你在控制台看到pong，说名成功连接。\r\n\r\n# Springboot方式连接到远程服务器\r\n众所周知，Springboot已经不默认集成Jedis了，是使用的Lettuce。要连接也比较简单，在你的spring配置文件中（笔者是application.yml）添加即可：\r\n```yml\r\nspring:\r\n  redis:\r\n    host: x.xxx.xxx.xx\r\n    port: 6379\r\n    # 设置密码\r\n    password: \"你设置的密码\"\r\n```\r\n\r\n编写测试类：\r\n```java\r\n@Test\r\n    void test2() throws JsonProcessingException {\r\n        //在redis中存取键值对\r\n        redisTemplate.opsForValue().set(\"hello\",\"redis\");\r\n        System.out.println(redisTemplate.opsForValue().get(\"hello\"));\r\n    }\r\n```\r\n如果控制台没报错，打开你的Linux，看看hello这个key有没有被添加进去，如果添加进去，则证明成功连接了\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201217235014468.png)\r\n\r\n如果本文解决了您的问题，留个赞再走吧~\r\n\r\n\r\n\r\n','2020-12-21 15:26:51','需求\r\n之前只会在Windows环境下使用 Redis，现在想在本地环境下写代码，连接到远程服务器(笔者使用阿里云)上面的Redis。\r\n\r\n远程服务器端\r\n1. 连接到远端，打开redis.conf\r\n首先使用Xshell或SecureCRT连接到你的远程服务器，然后cd到你的redis安装目录，找到redis.conf文件夹：','/blog-picture/redis.jpg','原创','','','','Redis远程连接Linux云服务器(Jedis方式或Springboot方式)','2020-12-26 12:48:11',57,0,1,NULL),(24,'','','\r\n# 前言\r\n在使用SpringBoot打jar包，内置的Tomcat部署到Linux时出现了一些问题，于是产生了打成war包，不让内置的Tomcat生效，让线上的Tomcat运行程序的想法。\r\n\r\n**前提：你的Linux的jdk版本和本地的jdk版本必须一致，打的war包才能生效**\r\n\r\n# 一、修改pom.xml文件\r\n##  1.改最开始的默认打包方式\r\n```xml\r\n<groupId>com.daji</groupId>\r\n    <artifactId>dajiblog_springboot</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    \r\n    <packaging>war</packaging>\r\n    \r\n    <name>dajiblog_springboot</name>\r\n```\r\n## 2.排除掉SpringBoot默认集成的tomcat\r\n```xml\r\n<dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n            <exclusions>\r\n                <exclusion><!--排除掉默认的tomcat-->\r\n                    <groupId>org.springframework.boot</groupId>\r\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\r\n                </exclusion>\r\n            </exclusions>\r\n        </dependency>\r\n```\r\n## 3. 引入新的依赖\r\n```xml\r\n<!-- 这个依赖让你能够在程序入口类：xxxAppAplication中直接执行main方法启动tomcat -->\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-tomcat</artifactId>\r\n            <!-- 但是这里一定要设置为provided -->\r\n            <scope>provided</scope>\r\n        </dependency>\r\n```\r\n## 4.修改你打war包的名称\r\n```xml\r\n<build>\r\n        <finalName>你war包的名称</finalName>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n```\r\n\r\n# 二、修改主启动类,继承SpringBootServletInitializer \r\n```java\r\n@SpringBootApplication\r\npublic class DajiblogSpringbootApplication extends SpringBootServletInitializer {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(DajiblogSpringbootApplication.class, args);\r\n    }\r\n    @Override\r\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\r\n    	//下面的DajiblogSpringbootApplication.class就是你自己的启动类\r\n        return builder.sources(DajiblogSpringbootApplication.class);\r\n    }\r\n\r\n}\r\n```\r\n\r\n# 三、在Maven中进行打包\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201224232737265.png)\r\n这样就可以在target目录下得到一个war包\r\n# 最后，推送到Linux远程服务器上，并使用tomcat的端口访问即可\r\n\r\n','2020-12-26 12:37:43','在使用SpringBoot打jar包，内置的Tomcat部署到Linux时出现了一些问题，于是产生了打成war包，不让内置的Tomcat生效，让线上的Tomcat运行程序的想法。\r\n\r\n前提：你的Linux的jdk版本和本地的jdk版本必须一致，打的war包才能生效','/blog-picture/java6.jpg','原创','','','','SpringBoot项目打成war包，部署到远端Linux服务器','2020-12-26 12:37:43',56,NULL,1,NULL),(26,'','','\r\n# 需求\r\n　我在做项目时（个人博客），分为前台登录（User）和后台登录（Admin），因此数据库存在两张表user和admin，分别记录普通用户和管理员的信息。并且现在要实现普通用户和管理员的分开登录，即需要两个Realm——UserRealm和AdminRealm，分别处理普通用户和管理员的验证功能。\r\n　\r\n　　但是问题在于，Shiro本身并不支持这样做，必须通过自定义Shiro的一些配置和扩展，才可以实现想要的功能。\r\n# 存在的问题\r\n我经过了全网搜寻，大致上的解决方案就是重写doAuthenticate()方法，让特定的Realm完成特定的功能。还有就是定义一个字段loginType，用于Controller层判断究竟是调用哪个Realm。网上的方法有很多：\r\n\r\n[shiro实现不同身份使用不同Realm进行验证](https://blog.csdn.net/xiangwanpeng/article/details/54802509)\r\n[SSM整合shiro实现多用户表多Realm统一登录认证（大章附代码）](https://blog.csdn.net/visket2008/article/details/78539334?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.control)\r\n\r\n我这里就不详细解释了，它们也不是本文的重点。**本文的重点是，你的项目中如果使用了不同身份多个Realm的解决方案，其项目设计，数据表结构创建本身就是有问题的。**\r\n\r\n原因在于，第一是使用这种方法，**容易出现只要任意一个身份登陆了，另一个身份不需登录就可以随便访问资源的情况；** 第二是这种方法比较繁琐，在Controller中也不能直接调用UsernamePasswordToken；第三是不便于我们对各类用户的管理。\r\n\r\n>设计上的反思\r\n这种做法不便于我们对各类用户的管理，虽然做了很多针对shiro的扩展去实现自己想要的功能，但渐渐明白为什么shiro不提供这样的解决方案。<br>\r\n这里，博主也建议，用户表可以有多个，但登录认证的表其实只保留一个就好，将你的多Realm抽象出来一个关系表映射，将各种状态加入，登录等认证交由统一维护，具体信息查询等封装抽象，下面做对应实现即可，这样才应该是跨平台的，以后也只需要存储跟别的平台的用户关系绑定，就完成了登录。\r\n\r\n\r\n\r\n\r\n\r\n# 解决方案\r\n在数据库最初设计时，实现登陆认证的表应该只有一个，然后通过表之间的关联关系来分配角色和权限（表设计例如下图所示，图来源于B站up主：编程不良人）：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201201194947189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)这样只需要写单个Realm（用户的Realm）就能解决问题。至于该用户究竟是普通用户还是管理员，由该用户表关联的角色表决定。\r\n\r\n\r\n','2020-12-26 12:42:22','我在做项目时（个人博客），分为前台登录（User）和后台登录（Admin），因此数据库存在两张表user和admin，分别记录普通用户和管理员的信息。并且现在要实现普通用户和管理员的分开登录，即需要两个Realm——UserRealm和AdminRealm，分别处理普通用户和管理员的验证功能。','/blog-picture/geek2.jpg','原创','','','','Shiro不同身份多个Realm的问题及反思','2020-12-26 12:42:22',56,NULL,1,NULL),(27,'','','\r\n\r\n# 前言\r\n学习完SSM框架之后, 对以前JavaWeb的原生方式, 以及对应的MVC架构有了新的理解, 特此总结.\r\n\r\n\r\n这一篇只谈架构, 不谈技术细节\r\n# 一、原生JavaWeb对应MVC架构\r\n先谈一下MVC\r\n什么是MVC ? :\r\nMVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写,(下图来自B站up主 我是莫提)\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201014224846527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n\r\n以前在JavaWeb阶段, MVC的实现主要是用以下方式实现的: \r\n\r\nM(Model) : pojo(实体类), 业务层(在项目中常常被命名为service包), dao(JDBC, Druid)等\r\nV(View) : JSP , HTML\r\nC(Controller) : Servlet\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201014232336801.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n\r\n\r\n其实, 我们不用学SSM框架, 也能用JavaWeb的那些技术构建一个B/S架构的项目, 而且项目是遵循MVC架构的. 学了SSM框架, 只不过是在MVC这三个层面, 对应替换了原生JavaWeb的那些技术而已.\r\n\r\n# 二、SSM框架对应MVC架构\r\n\r\nM(Model) : dao层和service层就是MVC中的M层 -> dao层是MyBatis做的事 , Spring会控制service层\r\nV(View)  : jsp和html组成了MVC的V(View)层, 负责进行数据展示 -> SpringMVC建立起V和C的桥梁\r\nC(Controller)  : Controller包下对应的MVC的C(Controller)层,该包下都是一些servlet  -> SpringMVC做的事\r\n那么Spring做的事呢? 就是整合SpringMVC和MyBatis, 同时控制Service层\r\n下图很好的表示了SSM框架对应MVC架构的关系(图来源于黑马程序员)\r\n\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201014232549241.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n\r\n\r\n## 第一块内容(MyBatis):\r\n\r\nDAO层就是定义了数据库的操作, 里面大都是增删改查的代码和方法\r\n\r\nDAO, M(module)层 -> 通通用的是MyBatis框架\r\n\r\n## 第二块内容(Spring):\r\n用到的配置文件:  [SSM中, 常用配置文件的头以及他们相互之间关系](https://blog.csdn.net/weixin_44757863/article/details/109018705)\r\n\r\nService层, 负责调用dao层.前面又会有层(Controller层)负责调用业务层\r\n\r\n业务层不单单调用dao层的方法, 每个业务层方法还会有它自己的逻辑.执行了一些其他的操作,\r\n这个逻辑用AOP的方式横切进去就能搞定\r\n\r\nMyBatis整合Spring框架.配置文件是spring-dao.xml(名字可以随便取), 用到的技术是MyBatis-Spring, 它需要在pom.xml中导入坐标:\r\n```xml\r\n<dependency>\r\n    <groupId>org.mybatis</groupId>\r\n    <artifactId>mybatis-spring</artifactId>\r\n    <version>2.0.2</version>\r\n</dependency>\r\n```\r\n\r\nSpring要整合3个地方:\r\n 一个是dao层. 用到MyBatis-Spring\r\n另一个要整合的地方就是Service层. 因为要配置事务. \r\n最后一个要整合的地方是SpringMVC\r\nSpring就是个大杂烩, 用来整合 IOC和AOP, 管理所有的bean的生命周期行为, 以及整合MyBatis和SpringMVC. \r\n\r\n## 第三块内容(SpringMVC):\r\n\r\n这里是对应的MVC的C(Controller层), 在项目中位于Controller包下. 该包下都是一些Servlet\r\n\r\n要想使用SpringMVC, 首先需要将普通项目转换成Web项目.\r\n\r\n鼠标移动到idea左侧项目树, 右键要转换的模块 -> Add Framework Support  \r\n\r\n然后进行如下图所示的配置:\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020101423181464.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70#pic_center)\r\n\r\n# 总结\r\n\r\n我们开发的B/S架构的系统, 一般流程是这样的: \r\n\r\n\r\n坐在电脑前的你->访问前端->前端和Controller交互->Controller调用Service->Service调Dao->Dao连接数据库\r\n\r\n看懂了SSM框架对应的MVC架构的关系, 我们就能总结出来一些设计模式的原则. 也就是说, 来了新业务,从下往上写比较好,先写Dao层然后-> Service-> controller  这样可以避免重复代码。\r\n但是设计，架构的话一般是自顶向下。\r\n\r\n以上是我的个人见解，欢迎大家讨论，指正。\r\n\r\n','2020-12-26 12:43:16','学习完SSM框架之后, 对以前JavaWeb的原生方式, 以及对应的MVC架构有了新的理解, 特此总结.\r\n\r\n这一篇只谈架构, 不谈技术细节','/blog-picture/java1.jpg','原创','','\0','','MVC架构和SSM框架的个人理解','2020-12-26 12:43:16',60,NULL,1,NULL),(28,'','','## 由于本文比较长，而且我博客的editormd不支持点击目录自动跳转，所以建议大家移步CSDN观看该博客，以获得更好的观看体验，谢谢大家（CSDN与这篇除了目录之外没区别）。\r\n\r\nCSDN链接：[https://blog.csdn.net/weixin_44757863/article/details/111751333](https://blog.csdn.net/weixin_44757863/article/details/111751333)\r\n# 文章目录\r\n• &nbsp; **一、前言**\r\n\r\n&nbsp;&nbsp;&nbsp;  • 1.1 背景介绍\r\n\r\n&nbsp;&nbsp;&nbsp;  • 1.2 寻找开源项目\r\n\r\n&nbsp;&nbsp;&nbsp;  • 1.3 技术选型\r\n\r\n• &nbsp; **二、正式开发**\r\n\r\n&nbsp;&nbsp;&nbsp;  • 2.1 看懂项目并模仿\r\n\r\n&nbsp;&nbsp;&nbsp;  • 2.2 正式动手敲之前，内化成自己的项目，对其设计并架构\r\n\r\n&nbsp;&nbsp;&nbsp;  • 2.3 动手编写\r\n\r\n• &nbsp; **三、博客功能展示**\r\n\r\n&nbsp;&nbsp;&nbsp;  • 3.1 Redis的集成\r\n\r\n&nbsp;&nbsp;&nbsp;  • 3.2 留言的级联关系\r\n\r\n&nbsp;&nbsp;&nbsp;  • 3.3 后台管理功能（已用Shiro进行了权限控制，只有管理员能进去）\r\n\r\n&nbsp;&nbsp;&nbsp;  • 3.4 文件上传功能\r\n\r\n• &nbsp; **四、问题的出现与解决**\r\n\r\n&nbsp;&nbsp;&nbsp;  • 4.1 MyBatis的多对多处理\r\n  \r\n&nbsp;&nbsp;&nbsp;  • 4.2 RESTful风格的再理解\r\n  \r\n&nbsp;&nbsp;&nbsp;  • 4.3 Shiro资源过滤\r\n  \r\n• &nbsp; **五、博客主营业务完成后，陆续添加的其他功能**\r\n\r\n&nbsp;&nbsp;&nbsp;  • 5.1 集成Shiro\r\n  \r\n&nbsp;&nbsp;&nbsp;  • 5.2 集成Redis\r\n  \r\n&nbsp;&nbsp;&nbsp;  • 5.3 集成Swagger\r\n  \r\n&nbsp;&nbsp;&nbsp;  • 5.4 集成PageHelper\r\n  \r\n&nbsp;&nbsp;&nbsp;  • 5.5 集成文件上传功能\r\n  \r\n• &nbsp; **六、购买服务器和域名，部署到阿里云，让大家访问**\r\n\r\n&nbsp;&nbsp;&nbsp;  • 6.1 前置知识：Linux相关\r\n  \r\n&nbsp;&nbsp;&nbsp;  • 6.2 购买服务器和域名，并完成部署\r\n  \r\n• &nbsp; **七、总结与反思**\r\n\r\n# 一、前言\r\n先上博客链接：[www.zr7.top](http://www.zr7.top)\r\n## 1.1 背景介绍\r\n笔者是一名非科班出身，对编程非常感兴趣的一名在校学生。在今年11月初，我学完了SSM阶段。但是对知识的掌握仅仅停留在网络视频以及技术书籍上的了解，并没有任何实际的项目经验。所以就产生了做一个综合项目的想法。\r\n\r\n## 1.2 寻找开源项目\r\n在寻找这类综合项目时，我却迷茫了。首先是网上的开源项目眼花缭乱，不知道哪些项目适合我现在的阶段。\r\n* **跟着普通大学计算机专业的实训走，做一个SSM架构的图书管理系统？**\r\n* **跟着尚硅谷，黑马程序员这类培训机构走，做一个黑马旅游网？谷粒商城？**\r\n* **去GitHub或是码云上看看，有没有优秀的开源项目可以借鉴？**\r\n\r\n最终我通过各种渠道，找到了各种各样的优秀综合项目：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201226160919629.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)通过对上面思维导图的梳理，我的思路逐渐清晰——那就是做一个个人博客项目。\r\n\r\n原因如下几点：\r\n* **网络上开源项目多，可供学习资源多，也有相关技术讨论圈子——技术成熟**\r\n* **可扩展性强，能够基于自己的技术栈不断往里面扩充**\r\n  * 事后看来，这一条的确是非常明智的决定。该博客的技术栈最终经历了SSM，SpringBoot，Redis，Shiro等等，而这些技术并不是我本来就会的，而是我通过边建博客边学习逐步掌握的，**掌握一个点，就向个人博客中想办法添加一个点。**\r\n* **可实际部署到远程服务器中，不仅锻炼全栈开发能力，还能获得一定的服务器运维知识。**\r\n\r\n这里我并不是说其他类型的综合项目不好，比如音乐播放系统，图书馆系统，网盘系统等等，它们也很优秀，但是最终将其发布到互联网，并连接到域名，由于种种原因，部署的实际意义并不是很大，**但是它们的业务逻辑和涉及的知识点也很全面，适合自己练手做。**\r\n\r\n## 1.3 技术选型\r\n\r\n前台显示借鉴：[燕十三的前端模板](https://gitee.com/yssgit/yan_shisan_blog_template)（已于Gitee上开源）\r\n\r\n后台管理借鉴：[李仁密老师——SpringBoot开发一个小而美的个人博客](https://www.bilibili.com/video/BV1nE411r7TF)（已于GitHub上开源，并有相关视频教学）\r\n\r\n虽然借鉴了他们的开源代码学习，但是在编写的实践过程中，后台和前台并不是互通的（李仁密和燕十三根本就不认识），导致他们之间的接口不互通，对此我只能自己设计后端部分和接口。\r\n\r\n而且第一版博客我并没有照着开源项目的SpringBoot架构写，而是用SSM头铁做的（**就是为了感受一下XML配Bean，更深入的了解Spring）**，中间出现了很多版本兼容的问题。\r\n\r\n\r\n# 二、正式开发\r\n## 2.1 看懂项目并模仿\r\n真正进入了开发阶段，第一步大家应该都知道，就是先从GitHub上Clone下来人家的项目，跑一跑，确定能跑通之后，再照猫画虎地模仿。\r\n\r\n这一时期大概花费了我五天左右，才搞清楚了人家的项目究竟是怎么一回事，技术点究竟有哪些。毕竟大家都是这样过来的，欲增加自己的功能，必先知道人家究竟是怎么跑的。\r\n\r\n想学会跑，必先学会走，必须懂得循序渐进的道理，才能走的更远。\r\n\r\n## 2.2 正式动手敲之前，内化成自己的项目，对其设计并架构\r\n前面我已经介绍过，我所借鉴的两个开源项目之间并不互通。根据MVC架构的原则([什么是MVC架构，我之前博客有写](https://blog.csdn.net/weixin_44757863/article/details/109086022))，所以要自己设计从View层到Controller层之间的桥梁，也就是俗称的接口，是一种对接前后端的规范。然而Model层如何与Controller层交互的方法以及业务层和持久层的对接，**开源项目中设计的极为巧妙，我也从中获取到了很多知识，并真切的感受到了Spring为我们带来的解耦。**\r\n\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201226165231523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)\r\n\r\n 后来添加新功能时，我也遵循着已经架构好的模式，自顶向下的进行开发。（此处有争议，为什么自顶向下，是因为我自己一人写了全栈，自顶向下我可以根据前端需要的数据，一步一步的添加方法，一直走到Dao层访问数据库。）具体实际开发是前后端分离的，可能我自己这种开发模式不是很科学，但是前后端都是我写的，规矩自然我来定。\r\n\r\n下面放出几张我当时设计好的设计图：\r\n\r\n后台管理功能：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201226170413371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)\r\n前台展示功能：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201226170716298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)\r\n## 2.3 动手编写\r\n到这一步就开始愉快的敲代码了，按照之前的设计，一个一个功能去实现。期间遇到了很多的问题，但是这一时期也是我进步最快最大的时期，我也在此期间总结出了很多技术博客。\r\n\r\n下面将一一介绍编写博客过程中踩过的坑。\r\n\r\n# 三、博客功能展示\r\n前台的页面显示大家都能在我的网站中看到。下面就说一下大家看不到的地方以及后台管理的部分功能好了：\r\n## 3.1 Redis的集成\r\n个人博客项目的主营业务（对博客的CRUD操作），实现了从Redis中读，从MySQL中写，从而加快了响应速度。\r\n## 3.2 留言的级联关系\r\n将所有除了父评论(爹级)的所有评论(不管你是子，孙，曾孙，重孙)找出来，并且一视同仁，全部视作父评论的子评论。\r\n        也就是说不管它们在数据库里面有多复杂的关系（子，孙，曾孙，重孙这种连续几级关系），一律一视同仁，看作子级。只要你上面有父级评论(数据库中parent_comment_id不为-1)，那么一视同仁。\r\n        因为在前端页面中，只有两层关系：父级评论和子级评论\r\n \r\n **这点有点像链表，有数据域和指针域。并递归调用寻找子集评论的方法查询出所有子孙级评论。**\r\n \r\n ## 3.3 后台管理功能（已用Shiro进行了权限控制，只有管理员能进去）\r\n 能对博客，分类等进行增删改查的基本操作和搜索。\r\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201226190514978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)搜索结果：\r\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201226190621491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)\r\n## 3.4 文件上传功能\r\n后台可以上传博客首图到数据库中，为此我还总结出博客：\r\n\r\n[SSM或SpringBoot上传图片到数据库](https://blog.csdn.net/weixin_44757863/article/details/110563601)\r\n \r\n （上传的按钮设计的有点丑，反正大家也进不去管理员页面嘿嘿）\r\n ![在这里插入图片描述](https://img-blog.csdnimg.cn/20201226190757491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)\r\n\r\n  \r\n# 四、问题的出现与解决\r\n\r\n## 4.1 MyBatis的多对多处理\r\n人家网上的开源项目数据库都是一对一的，我为了挑战自我（作死），硬给改成了多对多的。因此出现了非常多的问题，好在后来都一一解决了，并且大大提升了我的SQL能力。\r\n\r\n在处理这一问题的时候，我也是相当于把整个MyBatis和SQL语句都复习了一遍，总结出了不少博客和不少文章，欢迎大家观看：\r\n\r\n* [【数据库】快速判断一对多，多对多关系，并建立数据库实体之间的映射](https://blog.csdn.net/weixin_44757863/article/details/109614230)\r\n* [在MySQL中建立多对多关系的映射（建立中间表）](https://blog.csdn.net/weixin_44757863/article/details/109621839)\r\n* [在MySQL中添加外键的几种方式(一对多关系)](https://blog.csdn.net/weixin_44757863/article/details/109322657)\r\n* [狂神说MyBatis学习笔记: MyBatis中一对多和多对一处理](https://blog.csdn.net/weixin_44757863/article/details/109788057)\r\n* [简单讲解MyBatis中的resultMap，collection，association](https://blog.csdn.net/weixin_44757863/article/details/109789477)\r\n* [【MyBatis-Debug】在SQL语句中为数据库字段取别名的重要性](https://blog.csdn.net/weixin_44757863/article/details/109828210)\r\n* [【MyBatis】多对多条件下插入中间表（使用insert标签的属性）](https://blog.csdn.net/weixin_44757863/article/details/110010556)\r\n* [SQL语句 ORDER BY 多条件排序优先级（嵌套if语句）](https://blog.csdn.net/weixin_44757863/article/details/110839219)\r\n\r\n\r\n## 4.2 RESTful风格的再理解\r\n最开始我学RESTful风格的时候，认为只是一种风格而已，没有必要遵守，但是后来的麻烦教我做人了。\r\n\r\n之前因为自己开发经验不足，在Controller里面接口都是乱写，动不动就是@RequestMapping，直到集成swagger进行接口测试的时候，傻眼了。\r\n\r\n先给大家看看正常的接口是啥样的：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201226184507755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)每个接口的GET \\ POST分工明确，各自有不同的功能。\r\n\r\n再给大家看看我因为乱用@RequestMapping带来的后果：\r\n\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201226184723818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)看似有这么多接口，但是只对应了一个方法。产生这问题的原因就是乱使用@RequestMapping\r\n\r\n经此以后，终于理会了好好设计接口，使用RESTful风格的必要性\r\n\r\n## 4.3 Shiro资源过滤\r\n之前写某个功能模块的子功能模块的接口路径地址，一直瞎起名。直到有一天我集成了Shiro，要进行资源过滤时，傻眼了。\r\n\r\n假如你要对一组资源进行权限过滤，最方便的方式是利用Shiro的通配符（/**），这样的话，假如你这一组资源路径是不遵循规范，随机命名的，不但不美观，而且过滤就会带来极大的不便。不能使用通配符，只能一个一个手动过滤。\r\n\r\n\r\n# 五、博客主营业务完成后，陆续添加的其他功能\r\n这里就是自由探索阶段了。网络上的学习视频只有单个技术，不会手把手教你如何将这门技术应用到你自己的项目中。不过有了之前的基础，倒是也不难。\r\n\r\n先上图，我自己实现的附加功能（对号的是已实现的，未勾选的是还未实现，会随本人技术栈陆续更新）：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201226175014716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70) \r\n\r\n以下是我集成的各个功能，如无特殊说明，链接内资料都是我自己写的（打个小广告，涨涨访问量）\r\n\r\n## 5.1 集成Shiro\r\n[Shiro不同身份多个Realm的问题及反思](https://blog.csdn.net/weixin_44757863/article/details/110448527)\r\n[SSM环境下整合Shiro，网页过滤不生效](https://blog.csdn.net/weixin_44757863/article/details/110246801)\r\n## 5.2 集成Redis\r\n[Redis远程连接Linux云服务器(Jedis方式或Springboot方式)](https://blog.csdn.net/weixin_44757863/article/details/111349928)\r\n## 5.3 集成Swagger\r\n狂神说Java的b站视频  [【狂神说Java】一小时掌握Swagger技术](https://www.bilibili.com/video/BV1Y441197Lw?from=search&seid=6361078090386095542)\r\n## 5.4 集成PageHelper\r\n[【MyBatis】PageHelper无法处理多对多查询分页问题](https://blog.csdn.net/weixin_44757863/article/details/109890732)\r\n\r\n[【分页查询】在SSM环境中使用PageHelper](https://blog.csdn.net/weixin_44757863/article/details/109728886)\r\n\r\n## 5.5 集成文件上传功能\r\n[SSM或SpringBoot上传图片到数据库](https://blog.csdn.net/weixin_44757863/article/details/110563601)\r\n\r\n\r\n后期这个系列会持续更新，欢迎大家关注我。\r\n\r\n\r\n# 六、购买服务器和域名，部署到阿里云，让大家访问\r\n\r\n## 6.1 前置知识：Linux相关\r\n\r\n这个需要好好说道说道了。\r\n\r\n首先，如果想走这一步，必须先有Linux的相关知识。网络上关于Linux的学习资源也很多，我也学习了总结了不少。\r\n\r\n先给出一张自己的学习路线吧，画的有点乱，后期有时间会精修一下：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201226180705660.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)\r\n**还有我写的几篇关于Linux的排坑博客：**\r\n\r\n[Linux如何联网，以及SecureCRT解决中文乱码问题.](https://blog.csdn.net/weixin_44757863/article/details/109126398)\r\n\r\n[【Debug】本地JDK和阿里云服务器JDK不一致，jar包在Linux上跑不起来](https://blog.csdn.net/weixin_44757863/article/details/111084080)\r\n\r\n[Linux直接通过端口号杀对应进程，lsof命令无效](https://blog.csdn.net/weixin_44757863/article/details/111084368)\r\n\r\n[SpringBoot项目打成war包，部署到远端Linux服务器](https://blog.csdn.net/weixin_44757863/article/details/111658135)\r\n\r\n在进入下一个阶段之前，建议先自己在本地的电脑上安装一个Linux的虚拟机（我使用的是VMware）：\r\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20201226181228303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1Nzg2Mw==,size_16,color_FFFFFF,t_70)\r\n\r\n\r\n在本地环境下敲熟了，再去购买云服务器部署。\r\n\r\n## 6.2 购买服务器和域名，并完成部署\r\n这里就是上一个阶段的实战和应用了，有了Linux的前置知识，并不难。\r\n\r\n下面介绍我的学习路线：\r\n\r\n* [【狂神说Java】Linux最通俗易懂的教程阿里云真实环境学习](https://www.bilibili.com/video/BV187411y7hF)\r\n* [【狂神说Java】服务器购买及宝塔部署环境说明](https://www.bilibili.com/video/BV177411K7bH)\r\n* [2019-JAVA黑马程序员开发工程师架构（idea版）57期全套视频-web版（二）](https://www.bilibili.com/video/BV1tJ411v7k1?p=417)（这视频只需要看P414以后的内容即可）\r\n\r\n最后说一下关于域名备案\r\n\r\n备案没有大家想象的那么复杂，照着阿里云官方的指引(腾讯云，华为云也一样)一步一步做就好。是阿里云先审核你，阿里云的审核过了才会提交到工信部审核。\r\n\r\n阿里云的审核就一天，而且你有些地方填的不对，客服小姐姐会给你打电话纠正。工信部审核就比较慢了，官方给出的时间是18天，因各地区而异。\r\n\r\n笔者所在的山东地区，仅用了9天就通过了！必须得夸一下大山东的办事效率！\r\n\r\n域名备案完事之后，想要将域名连接到你的端口，只需要配置一下Nginx的域名映射即可：\r\n\r\n[阿里云服务器安装Nginx以及配置Nginx域名映射](https://blog.csdn.net/CoderYin/article/details/88743390)\r\n# 七、总结与反思\r\n该网站从构思到实际落地，共用了一个多月的时间，期间肯定有很多不足之处。如果各位看官在我的网页浏览体验不佳，我先要说一声抱歉。该博客一直在更新，体验一定会越来越好的。\r\n\r\n通过这次个人博客的开发，对自己的提升真的不是一点半点，强烈建议大家学完一个阶段，都要找一个项目来实际练手，这样既能加深印象，还能以练促学。\r\n\r\n当然，对我影响最大的还是各位大佬们的技术输出，他们的开源项目，技术分享态度，正代表了互联网精神。在仰望他们之余，正视自己的不足，努力填补短板，更坚定了自己在编程之路上走下去的决心和信念。\r\n\r\n最后，希望自己能一直保持对技术的初心。非科班出身的我，**正是因为热爱，才选择了编程**，虽然之前因为找不到方向，走了大量的弯路，但我还是幸运的。相信以后的路会越走越宽。\r\n\r\n欢迎大家访问[我的博客](http://www.zr7.top)！\r\n','2020-12-26 12:47:47','背景介绍\r\n笔者是一名非科班出身，对编程非常感兴趣的一名在校学生。在今年11月初，我学完了SSM阶段。但是对知识的掌握仅仅停留在网络视频以及技术书籍上的了解，并没有任何实际的项目经验。所以就产生了做一个综合项目的想法。','/blog-picture/DajiBlog.jpg','原创','','','','【技术栈】基于SpringBoot从零开发的个人博客 —— 从技术选型到部署实战','2020-12-27 03:37:36',62,0,1,NULL);

/*Table structure for table `t_comment` */

DROP TABLE IF EXISTS `t_comment`;

CREATE TABLE `t_comment` (
  `id` int(20) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `content` varchar(255) DEFAULT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `parent_comment_id` int(20) DEFAULT NULL,
  `admin_comment` bit(1) NOT NULL,
  `blogId` int(20) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `fk` (`blogId`),
  CONSTRAINT `fk` FOREIGN KEY (`blogId`) REFERENCES `t_blog` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Data for the table `t_comment` */

insert  into `t_comment`(`id`,`nickname`,`email`,`content`,`avatar`,`create_time`,`parent_comment_id`,`admin_comment`,`blogId`) values (1,'大吉','1134107721@qq.com','测试文章评论','/user-avatar/dajiavatar.jpg','2020-12-27 06:17:10',-1,'',28),(2,'宋哈娜','asdfadwf@qq.com','测试二级评论','/user-avatar/notRandom2.jpg','2020-12-27 06:17:51',1,'\0',28),(3,'Van様','lilasdf2@qq.com','测试子级评论','/user-avatar/notRandom7.jpg','2020-12-27 06:19:02',2,'\0',28),(4,'亡灵战神塞恩','sdfgdfsg1@qq.com','塞恩前来评论','/user-avatar/notRandom3.jpg','2020-12-27 06:25:00',-1,'\0',23),(5,'阿狸','112313@qq.com','回复1\n','/user-avatar/notRandom1.jpg','2020-12-27 06:25:23',4,'\0',23),(6,'大吉','1134107721@qq.com','博主回复测试','/user-avatar/dajiavatar.jpg','2020-12-27 06:25:44',5,'',23);

/*Table structure for table `t_friend` */

DROP TABLE IF EXISTS `t_friend`;

CREATE TABLE `t_friend` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `blogaddress` varchar(255) NOT NULL,
  `blogname` varchar(255) NOT NULL,
  `create_time` datetime DEFAULT NULL,
  `pictureaddress` varchar(255) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Data for the table `t_friend` */

/*Table structure for table `t_message` */

DROP TABLE IF EXISTS `t_message`;

CREATE TABLE `t_message` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `content` varchar(255) DEFAULT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `parent_message_id` bigint(20) DEFAULT NULL,
  `admin_message` bit(1) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=66 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Data for the table `t_message` */

insert  into `t_message`(`id`,`nickname`,`email`,`content`,`avatar`,`create_time`,`parent_message_id`,`admin_message`) values (52,'宋哈娜','asdfadwf@qq.com','D.Va 爱你哦','/user-avatar/notRandom2.jpg','2020-12-25 10:17:00',-1,'\0'),(53,'舔狗1','1134107www721@qq.com','awsl（测试级联回复）','/user-avatar/notRandom5.jpg','2020-12-26 10:04:56',52,'\0'),(54,'舔狗2','10242wer@qq.com','老婆今天太美了（测试二级级联）','/user-avatar/notRandom11.jpg','2020-12-26 10:05:31',52,'\0'),(55,'舔狗3','243sadfasdf6@qq.com','舔狗3回复舔狗1（测试子级回复）','/user-avatar/notRandom10.jpg','2020-12-26 10:06:15',53,'\0'),(56,'大吉','1134107721@qq.com','都别抢，D.Va是我的 （测试博主回复）','/user-avatar/dajiavatar.jpg','2020-12-26 10:07:00',52,''),(57,'大吉','1134107721@qq.com','博主测试留言','/user-avatar/dajiavatar.jpg','2020-12-25 10:08:02',-1,''),(59,'亡灵战神塞恩','sdfgdfsg1@qq.com','回复博主，给个面子','/user-avatar/notRandom3.jpg','2020-12-25 10:10:06',57,'\0'),(60,'阿狸','112313@qq.com','测试二级回复','/user-avatar/notRandom1.jpg','2020-12-25 10:10:35',57,'\0'),(61,'Van様','lilasdf2@qq.com','随便看看','/user-avatar/notRandom7.jpg','2020-12-25 10:11:14',-1,'\0'),(62,'Java程序猿','1242345235@qq.com','鸟你一下','/user-avatar/notRandom6.jpg','2020-12-25 10:11:40',61,'\0'),(63,'尤里','rtyrty1@qq.com','能自己回复自己吗','/user-avatar/notRandom4.jpg','2020-12-25 10:15:14',-1,'\0'),(64,'尤里','rtyrty1@qq.com','脑子秀逗了？自己看行不行','/user-avatar/notRandom4.jpg','2020-12-25 10:15:43',63,'\0'),(65,'浩哥','lilaasdf3@qq.com','登陆后才能留言','/user-avatar/notRandom9.jpg','2020-12-24 06:23:20',-1,'\0');

/*Table structure for table `t_picture` */

DROP TABLE IF EXISTS `t_picture`;

CREATE TABLE `t_picture` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `pictureaddress` varchar(255) DEFAULT NULL,
  `picturedescription` varchar(255) DEFAULT NULL,
  `picturename` varchar(255) DEFAULT NULL,
  `picturetime` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Data for the table `t_picture` */

/*Table structure for table `t_type` */

DROP TABLE IF EXISTS `t_type`;

CREATE TABLE `t_type` (
  `id` int(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Data for the table `t_type` */

insert  into `t_type`(`id`,`name`) values (1,'数据库'),(2,'前端'),(3,'学习方法'),(4,'SSM框架'),(5,'SpringBoot'),(6,'Debug专题'),(7,'Linux'),(8,'设计模式，架构');

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `uid` int(20) NOT NULL AUTO_INCREMENT,
  `email` varchar(100) DEFAULT NULL,
  `pwd` varchar(20) DEFAULT NULL,
  `nickname` varchar(20) DEFAULT NULL,
  `status` int(1) DEFAULT NULL,
  `emailcode` int(5) DEFAULT NULL,
  `role` varchar(100) DEFAULT 'user',
  `avatar` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`uid`)
) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8;

/*Data for the table `user` */

insert  into `user`(`uid`,`email`,`pwd`,`nickname`,`status`,`emailcode`,`role`,`avatar`) values (1,'invalidName','123','Blog',1,NULL,'user',''),(4,'112313@qq.com','123','阿狸',1,123,'user','/user-avatar/notRandom1.jpg'),(5,'asdfadwf@qq.com','123','宋哈娜',1,2223,'user','/user-avatar/notRandom2.jpg'),(8,'sdfgdfsg1@qq.com','123','亡灵战神塞恩',1,519,'user','/user-avatar/notRandom3.jpg'),(9,'rtyrty1@qq.com','123','尤里',1,8032,'user','/user-avatar/notRandom4.jpg'),(17,'1134107www721@qq.com','123','舔狗1',1,123123,'user','/user-avatar/notRandom5.jpg'),(18,'1242345235@qq.com','123','Java程序猿',1,123,'user','/user-avatar/notRandom6.jpg'),(32,'1134107721@qq.com','root','大吉',1,0,'admin','/user-avatar/dajiavatar.jpg'),(33,'10242wer@qq.com','123','舔狗2',1,0,'user','/user-avatar/notRandom11.jpg'),(34,'243sadfasdf6@qq.com','123','舔狗3',1,0,'user','/user-avatar/notRandom10.jpg'),(35,'lilasdf2@qq.com','123','Van様',1,0,'user','/user-avatar/notRandom7.jpg'),(36,'lilaasdf3@qq.com','123','浩哥',1,0,'user','/user-avatar/notRandom9.jpg');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
