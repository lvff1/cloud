为了方便测试(怕被玩坏), 特导出了t_blog表的一些数据,供插入测试
为了方便测试(怕被玩坏), 特导出了t_type表的一些数据,供插入测试
为了方便测试(怕被玩坏), 特导出了blog_type表的一些数据,供插入测试

t_blog表和t_type表是多对多关系, 关系由中间表blog_type表维护

用时只需要
1. 删除t_blog表, t_type表 blog_type表 这三个表的所有数据
2. 粘贴以下的所有sql语句即可.


USE daji_ssm;

-- 这是mysql的单行注释,注意,两个横杠必须加个空格,注释格式才是对的
-- t_blog表

insert into `t_blog` (`id`, `appreciation`, `commentabled`, `content`, `create_time`, `description`, `first_picture`, `flag`, `published`, `recommend`, `share_statement`, `title`, `update_time`, `views`, `type_id`, `admin_id`, `comment_count`) values('1','','','\r\n【数据库】快速判断一对多，多对多关系，并建立数据库实体之间的映射\r\n\r\n一对多关系\r\n\r\n举例：部门和员工的对应关系 :\r\n\r\n1. 正过来看，(“1”)一个部门里面可以有多个员工(“n”)\r\n2. 反过来看一一对应:而一个员工只能对应一个部门\r\n\r\n由于满足上面两条, 所以一对多关系成立, 部门是1 员工是n\r\n策略： 在多的一方添加外键, 指向一的一方的主键。\r\n\r\n如何在数据库中操作？请看：在MySQL中添加外键的几种方式(一对多关系)\r\n多对多关系\r\n\r\n举例：教师与学生\r\n\r\n1. 正过来看，(“1”)一个老师能教多名学生(“n”)\r\n2. 反过来看, (“1”)一个学生有多个老师(“n”)\r\n\r\n策略：增加一张表，专门维护两张表之间的关系。\r\n\r\n增加中间表之后:中间表与教师表形成了一对多的关系，而且中间表维护了唯一对应的找到表中数据的关系。\r\n\r\n同样的学生表与中间表也是一个一对多的关系。一对多的关系可以匹配到关联表中的数据。\r\n\r\n如何在数据库中操作？请看：在MySQL中建立多对多关系的映射（建立中间表）\r\n总结\r\n\r\n总结, 判断一对多还是多对一, 主要取决于反过来看(也就是第二条)\r\n\r\n    正反均是一对一 : 一对一\r\n    正是一对多,反是一对一 : 一对多\r\n    正是一对一,反是一对多 : 多对一(这一条和一对多本质上是一类,只不过是反过来理解罢了)\r\n    正反均是一对多 : 多对多\r\n\r\n','2020-11-16 22:09:28','描写数据库的文章',NULL,'原创','','','','【数据库】快速判断一对多，多对多关系，并建立数据库实体之间的映射','2020-11-17 22:13:03','254',NULL,'1','5');
insert into `t_blog` (`id`, `appreciation`, `commentabled`, `content`, `create_time`, `description`, `first_picture`, `flag`, `published`, `recommend`, `share_statement`, `title`, `update_time`, `views`, `type_id`, `admin_id`, `comment_count`) values('2','','','文章目录\r\n\r\n    前言\r\n    一、导入jar包\r\n    二、使用步骤\r\n    三、常用配置\r\n    四、小案例演示最简单的分页查询\r\n        需求：实现分页查询\r\n        数据库和Dao层的方法\r\n        Controller层代码：\r\n        HTML页面：\r\n    总结\r\n\r\n前言\r\n\r\n本文讨论SSM框架下PageHelper的使用，SpringBoot提供的starter方式应该大同小异，用到后会在文章里更新。\r\n一、导入jar包\r\n\r\n<!--pagehelper-->\r\n        <dependency>\r\n            <groupId>com.github.pagehelper</groupId>\r\n            <artifactId>pagehelper</artifactId>\r\n            <version>5.1.10</version>\r\n        </dependency>\r\n\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n    6\r\n\r\n二、使用步骤\r\n\r\n先给出中文文档：MyBatis 分页插件 PageHelper，如有需要可详细查阅。\r\n\r\n下面通过一个小demo介绍如何简单使用PageHelper\r\n三、常用配置\r\n\r\n官方文档上有两种配置方式，笔者采用这一种：\r\n\r\n在 Spring 配置文件中配置拦截器插件（注：也就是配置数据源的那个地方）\r\n使用 spring 的属性配置方式，可以使用 plugins 属性像下面这样配置：\r\n\r\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\r\n  <!-- 注意其他配置 -->\r\n  <property name=\"plugins\">\r\n    <array>\r\n      <bean class=\"com.github.pagehelper.PageInterceptor\">\r\n        <property name=\"properties\">\r\n          <!--使用下面的方式配置参数，一行配置一个 -->\r\n          <value>\r\n            reasonable=true\r\n          </value>\r\n        </property>\r\n      </bean>\r\n    </array>\r\n  </property>\r\n</bean>\r\n\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n    6\r\n    7\r\n    8\r\n    9\r\n    10\r\n    11\r\n    12\r\n    13\r\n    14\r\n    15\r\n\r\n注意上面代码中的 reasonable=true，是可以自己配置的，所有的配置都在官方文档中写的明明白白。\r\n\r\n笔者这里只配了reasonable=true。这个属性含义是分页参数合理化，默认值为false， 当该参数设置为 true 时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询。\r\n四、小案例演示最简单的分页查询\r\n需求：实现分页查询\r\n\r\n前端界面是长这样的','2020-11-03 22:09:28','PageHelper',NULL,'转载','','','','【分页查询】在SSM环境中使用PageHelper','2020-11-17 22:13:03','30',NULL,'1','0');
insert into `t_blog` (`id`, `appreciation`, `commentabled`, `content`, `create_time`, `description`, `first_picture`, `flag`, `published`, `recommend`, `share_statement`, `title`, `update_time`, `views`, `type_id`, `admin_id`, `comment_count`) values('3','','','一、应用场景\r\n\r\n在使用SpringMVC（Controller）和thymeleaf（html页面）进行交互时，可以使用model.addAttribute这个方法向前端传递键值对。\r\n\r\nmodel.addAttribute(\"key\", value);\r\n\r\n    1\r\n\r\n键值对中的键，可以随便取名，值也能传很多种类型。传基本类型大家应该都会，本文就以一个例子抛砖引玉， 传一个对象到html，并用thymeleaf的方法进行接收。\r\n二、Controller层编写\r\n\r\n@RequestMapping(\"/login\")\r\n    public String login(Model model){\r\n        //传一个对象进去  用户名是大吉, 密码是123456\r\n        User user = new User(\"大吉\", \"123456\");\r\n            model.addAttribute(\"recentuser\", user);\r\n            return \"前端页面\";\r\n    }\r\n\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n    6\r\n    7\r\n\r\n代码非常简单， User是我们自己定义的一个对象，只有两个属性，username和password，以及对应的get，set，constructor方法\r\n\r\npublic class User {\r\n    public String username;\r\n    public String password;\r\n\r\n    public User(String username, String password) {\r\n        this.username = username;\r\n        this.password = password;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n}\r\n\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n    6\r\n    7\r\n    8\r\n    9\r\n    10\r\n    11\r\n    12\r\n    13\r\n    14\r\n    15\r\n    16\r\n    17\r\n    18\r\n    19\r\n    20\r\n    21\r\n    22\r\n    23\r\n    24\r\n    25\r\n    26\r\n\r\n三、前端页面接收\r\n\r\n<span th:text=\"${recentuser.username}\"></span>\r\n<span th:text=\"${recentuser.password}\"></span>\r\n\r\n    1\r\n    2\r\n\r\n其实非常简单，要填写的内容就是model.attribute里的键。注意有个地方比较坑，这里的recentuser.username如果写成recentuser.getUsername()就会出错，应该直接写对象的成员变量。','2020-10-01 22:09:28','model传递对象',NULL,'原创','','','','model.addAttribute向前端(thymeleaf)传递对象并接收','2020-11-17 22:13:03','2666',NULL,'1','1');
insert into `t_blog` (`id`, `appreciation`, `commentabled`, `content`, `create_time`, `description`, `first_picture`, `flag`, `published`, `recommend`, `share_statement`, `title`, `update_time`, `views`, `type_id`, `admin_id`, `comment_count`) values('4','','','文章目录\r\n\r\n    前言\r\n    一、如何编写SpringMVC的配置文件？\r\n    二、启动服务器之后，页面html的代码显示不全\r\n    总结\r\n\r\n前言\r\n\r\nSpringMVC和Thymeleaf组合在一起的问题，比较冷门，一般遇到的也比较少。因为大家在SSM阶段技术选型的时候，一般会选用jsp，学校老师也是这么教的。\r\n一般在SpringBoot阶段用到Thymeleaf模板引擎比较多，而且SpringBoot还有专门的Thymeleaf的启动器，帮我们省去了不少配置。\r\n\r\n但是我在搭建个人博客时，想练习一下SSM，又想摒弃jsp技术，就结合了一下Thymeleaf。但是发现了不少的问题：\r\n一、如何编写SpringMVC的配置文件？\r\n\r\n这里对xml进行讨论，笔者用的是xml配置。\r\n一开始我是照着《Spring实战（第四版）》进行配置，书上是这么说的：','2020-07-15 22:09:28','thymeleaf中文乱码',NULL,'转载','','','','SpringMVC整合Thymeleaf中文乱码问题，html代码显示不全','2020-11-17 22:13:03','56',NULL,'1','2');
insert into `t_blog` (`id`, `appreciation`, `commentabled`, `content`, `create_time`, `description`, `first_picture`, `flag`, `published`, `recommend`, `share_statement`, `title`, `update_time`, `views`, `type_id`, `admin_id`, `comment_count`) values('5','','','项目场景：\r\n\r\n在使用SpringMVC开发时，我想使用JavaWeb的方式传递数据（形如如下代码）：\r\n\r\nrequest.getRequestDispatcher().forward(request,response)\r\n\r\nresponse.sendRedirect()\r\n\r\n发现SpringMVC通过视图解析器帮我们自动做了这一步，只需要在return语句中返回字符串形式就可以实现forward和redirect操作了。但是这个return语句应该怎么填才能被SpringMVC正确识别呢？\r\n原因分析：\r\n\r\nFirst of all, 要用redirect和forward, 如果你想要返回一个页面的话, 都得写一个controller!\r\n\r\n就算这个controller啥也不做, 那也得写一个controller, 让这页面走视图解析器。','2020-10-08 22:09:28','forward和redirect',NULL,'原创','','','','在SpringMVC中使用forward和redirect','2020-11-17 22:13:03','3',NULL,'1','3');
insert into `t_blog` (`id`, `appreciation`, `commentabled`, `content`, `create_time`, `description`, `first_picture`, `flag`, `published`, `recommend`, `share_statement`, `title`, `update_time`, `views`, `type_id`, `admin_id`, `comment_count`) values('6','','','文章目录\r\n\r\n    前言\r\n    一、导入项目\r\n        1.选择open\r\n        2.配置Spring（假如你项目不是基于Spring，可跳过）\r\n    二、添加web并配置Artifacts\r\n        添加web\r\n        配置Artifacts\r\n    三、配置tomcat\r\n    四、添加lib目录（idea的bug，大坑！）\r\n    后记\r\n\r\n前言\r\n\r\n本文记一下在GitHub上面克隆的maven项目，如何一步一步导入idea，并成功跑起来的方法。\r\n\r\n本文均以最坏情况为例，假设你idea打开项目之后啥都没动过，也啥都没有配置过。这样可以尽可能地模拟并解决大多数情况。\r\n一、导入项目\r\n1.选择open','2020-07-14 22:09:28','导入maven',NULL,'转载','','','','记一次idea导入maven项目的流程','2020-11-17 22:13:03','9',NULL,'1','7');
insert into `t_blog` (`id`, `appreciation`, `commentabled`, `content`, `create_time`, `description`, `first_picture`, `flag`, `published`, `recommend`, `share_statement`, `title`, `update_time`, `views`, `type_id`, `admin_id`, `comment_count`) values('7','','','前言\r\n\r\n在解决复杂问题时，有一个非常实用的工具就是思维导图，它简单易上手。其实在大二时老师有讲过思维导图的绘制，但是自己一直懒得用，一是习惯了记文字笔记，二是平常编码用的是电脑，惧怕在线工具的学习成本。\r\n\r\n但是笔者最近在找开源项目，设计项目模块时，用传统笔记方式已经不太能胜任了，痛定思痛之下，决定学一下思维导图的绘制要点以及使用在线软件绘制，经过学习发现简单到超乎想象。\r\n\r\n这里笔者推荐使用一款叫GitMind的工具在线绘制思维导图，并总结一下思维导图的绘制要点。\r\n一、什么是思维导图？\r\n\r\n思维导图，英文是The Mind Map，又叫心智导图，是表达发散性思维的有效图形思维工具 ，它简单却又很有效，是一种实用性的思维工具。\r\n\r\n思维导图的最大的两个好处就是方便记忆和理清思路，同时思维导图特殊的记录方式也便于捕捉跳跃思考。\r\n二、思维导图的绘制要点\r\n\r\n我认为，虽然大家都知道思维导图的定义，但是先别着急上手画，得先知道一点思维导图的基本绘制方法，这样才能最大化思维导图的威力。\r\n\r\n这里给出知乎的一篇链接: 如何自学思维导图？','2020-08-09 22:09:28','思维导图',NULL,'原创','','','','思维导图的绘制要点及使用GitMind工具快速制作思维导图','2020-11-17 22:13:03','756',NULL,'1','4');
insert into `t_blog` (`id`, `appreciation`, `commentabled`, `content`, `create_time`, `description`, `first_picture`, `flag`, `published`, `recommend`, `share_statement`, `title`, `update_time`, `views`, `type_id`, `admin_id`, `comment_count`) values('8','','','前言\r\n\r\n本篇文章列举了SpringBoot（基于版本2.3.4）阶段，需要引入到pom.xml的常用坐标。这是一篇工具博客，需要什么就拿什么。\r\nSpringBoot-Web启动器\r\n\r\n用于开启web支持\r\n\r\n<!--启动器-->\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n\r\n测试test启动器\r\n\r\n<dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-test</artifactId>\r\n        <scope>test</scope>\r\n        <exclusions>\r\n            <exclusion>\r\n                <groupId>org.junit.vintage</groupId>\r\n                <artifactId>junit-vintage-engine</artifactId>\r\n            </exclusion>\r\n        </exclusions>\r\n    </dependency>\r\n\r\n    1\r\n    2\r\n    3\r\n    4\r\n    5\r\n    6\r\n    7\r\n    8\r\n    9\r\n    10\r\n    11\r\n\r\nThymeLeaf相关','2020-10-03 22:09:28','SpringBoot坐标',NULL,'原创','','','','SpringBoot阶段pom.xml的常用坐标','2020-11-17 22:13:03','455',NULL,'1','2');
insert into `t_blog` (`id`, `appreciation`, `commentabled`, `content`, `create_time`, `description`, `first_picture`, `flag`, `published`, `recommend`, `share_statement`, `title`, `update_time`, `views`, `type_id`, `admin_id`, `comment_count`) values('9','','','前言\r\n\r\n学习框架以来，虽然代码量，耦合度大大减少，但是框架都有轻代码，重配置的特点，导致各种配置纷繁复杂，就算使用了注解开发，前后端互相传递数据，接收参数，也容易让初学者搞混。\r\n\r\n如果你是看网上的视频自学，跟着视频写Demo，调用关系更是让人头大，很多种情况都是为了完成一个业务，传参，调用关系动不动就涉及到好几个文件，注释都不知道从哪开始写。所以笔者总结了一套比较有用的注释方法，能比较高效的注释Demo中的代码，理清业务之间的关系。而且隔较久时间，日后回看仍然能够清晰明了。\r\n\r\n本文是学习方法总结，不涉及任何技术和代码讨论。但是不管是什么语言，什么技术都可以通过这种方法加代码注释，屡试不爽。\r\n一、编写Readme.md\r\n\r\n在每一个模块里面至少新建一个Readme.md文件（文件名可以自己起，叫dog.md都行），到模块的根目录。这个Readme.md可以总结一下这个Demo/项目到底是干什么的，用到的知识点，技术点是什么。\r\n\r\n日后如果回看代码，先去找这个Readme.md, 就大概知道这个模块究竟干了什么事情了。非常方便。\r\n\r\n下面举个例子，看我在Readme.md里面究竟写了啥：','2020-08-01 22:09:28','框架学习方法',NULL,'转载','','','','总结一个非常有用的框架学习方法（非常有效！）','2020-11-17 22:13:03','345',NULL,'1','1');
insert into `t_blog` (`id`, `appreciation`, `commentabled`, `content`, `create_time`, `description`, `first_picture`, `flag`, `published`, `recommend`, `share_statement`, `title`, `update_time`, `views`, `type_id`, `admin_id`, `comment_count`) values('10','','','前言\r\n\r\n学完RESTful风格之后，一直想总结一下它的基本使用，下文以一个简单案例的形式，创建一个使用RESTful风格的基本场景。\r\n一、RESTful风格是什么？\r\n\r\n现在的大多数网页都在用RESTful风格，它是一种风格，而不是一种技术。利用这种风格设计路由比较简洁高效。\r\n\r\nRESTful风格特点：\r\n\r\n    引自百度百科：\r\n    1、每一个URI代表1种资源；\r\n    2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；\r\n    3、通过操作资源的表现形式来操作资源；\r\n    4、资源的表现形式是XML或者HTML；\r\n    5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。\r\n\r\n二、搭建环境：\r\n\r\n非常简单，需要以下3个文件，前两个html个文件有用的代码只有一行。','2020-10-28 22:09:28','restful',NULL,'原创','','','','简单介绍RESTful风格','2020-11-17 22:13:03','7840',NULL,'1','0');

-- t_type表

insert into `t_type` (`id`, `name`) values('1','数据库');
insert into `t_type` (`id`, `name`) values('2','前端');
insert into `t_type` (`id`, `name`) values('3','学习方法');
insert into `t_type` (`id`, `name`) values('4','SSM框架');
insert into `t_type` (`id`, `name`) values('5','SpringBoot');
insert into `t_type` (`id`, `name`) values('6','Debug专题');

-- blog_type表

insert into `blog_type` (`bid`, `tid`) values('1','1');
insert into `blog_type` (`bid`, `tid`) values('2','1');
insert into `blog_type` (`bid`, `tid`) values('3','2');
insert into `blog_type` (`bid`, `tid`) values('4','2');
insert into `blog_type` (`bid`, `tid`) values('5','2');
insert into `blog_type` (`bid`, `tid`) values('10','2');
insert into `blog_type` (`bid`, `tid`) values('7','3');
insert into `blog_type` (`bid`, `tid`) values('9','3');
insert into `blog_type` (`bid`, `tid`) values('2','4');
insert into `blog_type` (`bid`, `tid`) values('3','4');
insert into `blog_type` (`bid`, `tid`) values('4','4');
insert into `blog_type` (`bid`, `tid`) values('5','4');
insert into `blog_type` (`bid`, `tid`) values('6','4');
insert into `blog_type` (`bid`, `tid`) values('8','5');
insert into `blog_type` (`bid`, `tid`) values('1','6');
insert into `blog_type` (`bid`, `tid`) values('6','6');
insert into `blog_type` (`bid`, `tid`) values('7','6');
insert into `blog_type` (`bid`, `tid`) values('10','6');
